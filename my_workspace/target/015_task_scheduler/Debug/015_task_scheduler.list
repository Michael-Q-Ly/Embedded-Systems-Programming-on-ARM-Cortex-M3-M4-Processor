
015_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08001774  08001774  00011774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800187c  0800187c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800187c  0800187c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800187c  0800187c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800187c  0800187c  0001187c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001880  08001880  00011880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000128  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000178d  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004e0  00000000  00000000  00021823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00021d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e8  00000000  00000000  00021e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000245e  00000000  00000000  00021f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011dd  00000000  00000000  0002436e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008aaa  00000000  00000000  0002554b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0002dff5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d9c  00000000  00000000  0002e048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800175c 	.word	0x0800175c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000070 	.word	0x20000070
 80001e8:	0800175c 	.word	0x0800175c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <led_init_all>:
#define STM32F42xx

/*
 * This function initializes the on-board LEDs
 */
void led_init_all( void ) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr   = ( uint32_t* )( 0x40023830 ) ;
 8000202:	4b10      	ldr	r3, [pc, #64]	; (8000244 <led_init_all+0x48>)
 8000204:	607b      	str	r3, [r7, #4]
	uint32_t *pGpioGModeReg = ( uint32_t* )( 0x40021800 ) ;
 8000206:	4b10      	ldr	r3, [pc, #64]	; (8000248 <led_init_all+0x4c>)
 8000208:	603b      	str	r3, [r7, #0]

#ifdef STM32F42xx
	// Set clk enable for GPIO G
	*pRccAhb1enr |= ( 1 << 6 ) ;                                // Enable GpioG
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
	// Configure the LEDs output type as outputs
	*pGpioGModeReg |= ( 1 << ( 2 * LED_GREEN ) ) ;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	601a      	str	r2, [r3, #0]
	*pGpioGModeReg |= ( 1 << ( 2 * LED_RED ) ) ;
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	601a      	str	r2, [r3, #0]

	led_off( LED_GREEN ) ;
 800022e:	200d      	movs	r0, #13
 8000230:	f000 f838 	bl	80002a4 <led_off>
	led_off( LED_RED ) ;
 8000234:	200e      	movs	r0, #14
 8000236:	f000 f835 	bl	80002a4 <led_off>
	led_off( LED_GREEN ) ;
	led_off( LED_ORANGE ) ;
	led_off( LED_RED ) ;
	led_off( LED_BLUE ) ;
#endif /* STM32F42xx */
}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40023830 	.word	0x40023830
 8000248:	40021800 	.word	0x40021800

0800024c <delay>:

// Software delay; wastes clock cycles
// TODO: Maybe use a hardware timer instead in the future
/*
 * This function creates a software delay for the LEDs */
void delay( uint32_t count ) {
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	for( uint32_t i = 0 ; i < count ; i++ ) ;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	e002      	b.n	8000260 <delay+0x14>
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	3301      	adds	r3, #1
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	429a      	cmp	r2, r3
 8000266:	d3f8      	bcc.n	800025a <delay+0xe>
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <led_on>:

/*
 * This function turns the LED on and accepts as an argument the led color's port number
 */
void led_on( uint8_t led_no ) {
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	// Add the Output Data Register (ODR) offset to the base address of GPIO G clk
	uint32_t *pGpioGDataReg = ( uint32_t* )( 0x40021814 ) ;
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <led_on+0x2c>)
 8000280:	60fb      	str	r3, [r7, #12]
	*pGpioGDataReg |= ( 1 << led_no ) ;
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2101      	movs	r1, #1
 800028a:	fa01 f202 	lsl.w	r2, r1, r2
 800028e:	431a      	orrs	r2, r3
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	601a      	str	r2, [r3, #0]

}
 8000294:	bf00      	nop
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021814 	.word	0x40021814

080002a4 <led_off>:

/*
 * This function turns the LED off and accepts as an argument the led color's port number
 */
void led_off( uint8_t led_no ) {
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpioGDataReg = ( uint32_t* )( 0x40021814 ) ;
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <led_off+0x2c>)
 80002b0:	60fb      	str	r3, [r7, #12]
	*pGpioGDataReg &= ~( 1 << led_no ) ;
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	79fa      	ldrb	r2, [r7, #7]
 80002b8:	2101      	movs	r1, #1
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	43d2      	mvns	r2, r2
 80002c0:	401a      	ands	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	bf00      	nop
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021814 	.word	0x40021814

080002d4 <main>:
} TCB_t ;

TCB_t user_tasks[MAX_TASKS] ;

int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	initialise_monitor_handles() ;                                          				// Debugger
 80002d8:	f001 f9c6 	bl	8001668 <initialise_monitor_handles>

	enable_processor_faults() ;
 80002dc:	f000 f92a 	bl	8000534 <enable_processor_faults>

	init_tasks_stack() ;
 80002e0:	f000 f8a8 	bl	8000434 <init_tasks_stack>

	// Initialize the scheduler stack (which is MSP)
	init_scheduler_stack( SCHED_STACK_START ) ;
 80002e4:	4807      	ldr	r0, [pc, #28]	; (8000304 <main+0x30>)
 80002e6:	f000 f89f 	bl	8000428 <init_scheduler_stack>

	// Task stack initialization to store the dummy frames  
	init_tasks_stack() ;
 80002ea:	f000 f8a3 	bl	8000434 <init_tasks_stack>

    // Initialize all of the LEDs
    led_init_all() ;
 80002ee:	f7ff ff85 	bl	80001fc <led_init_all>

	// Generate SysTick timer exception
	init_systick_timer( TICK_HZ ) ;
 80002f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f6:	f000 f863 	bl	80003c0 <init_systick_timer>
	
	// Switch from MSP to PSP
	switch_sp_to_psp() ;
 80002fa:	f000 f973 	bl	80005e4 <switch_sp_to_psp>

	task1_handler() ;
 80002fe:	f000 f803 	bl	8000308 <task1_handler>

	/* Loop forever */
	for(;;);
 8000302:	e7fe      	b.n	8000302 <main+0x2e>
 8000304:	2001f000 	.word	0x2001f000

08000308 <task1_handler>:
}


void task1_handler( void ) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	while ( 1 ) {
		printf( "This is task1\n" ) ;
 800030c:	4807      	ldr	r0, [pc, #28]	; (800032c <task1_handler+0x24>)
 800030e:	f000 fb2b 	bl	8000968 <puts>
        led_on( LED_GREEN ) ;
 8000312:	200d      	movs	r0, #13
 8000314:	f7ff ffae 	bl	8000274 <led_on>
        delay( DELAY_COUNT_250MS ) ;
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <task1_handler+0x28>)
 800031a:	f7ff ff97 	bl	800024c <delay>
        led_off( LED_GREEN ) ;
 800031e:	200d      	movs	r0, #13
 8000320:	f7ff ffc0 	bl	80002a4 <led_off>
        delay( DELAY_COUNT_250MS ) ;
 8000324:	4802      	ldr	r0, [pc, #8]	; (8000330 <task1_handler+0x28>)
 8000326:	f7ff ff91 	bl	800024c <delay>
		printf( "This is task1\n" ) ;
 800032a:	e7ef      	b.n	800030c <task1_handler+0x4>
 800032c:	08001774 	.word	0x08001774
 8000330:	0004c4b4 	.word	0x0004c4b4

08000334 <task2_handler>:
	}
}

void task2_handler( void ) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	while ( 1 ) {
		printf( "This is task2\n" ) ;
 8000338:	4807      	ldr	r0, [pc, #28]	; (8000358 <task2_handler+0x24>)
 800033a:	f000 fb15 	bl	8000968 <puts>
        led_on( LED_RED ) ;
 800033e:	200e      	movs	r0, #14
 8000340:	f7ff ff98 	bl	8000274 <led_on>
        delay( DELAY_COUNT_1S ) ;
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <task2_handler+0x28>)
 8000346:	f7ff ff81 	bl	800024c <delay>
        led_off( LED_RED ) ;
 800034a:	200e      	movs	r0, #14
 800034c:	f7ff ffaa 	bl	80002a4 <led_off>
        delay( DELAY_COUNT_1S ) ;
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <task2_handler+0x28>)
 8000352:	f7ff ff7b 	bl	800024c <delay>
		printf( "This is task2\n" ) ;
 8000356:	e7ef      	b.n	8000338 <task2_handler+0x4>
 8000358:	08001784 	.word	0x08001784
 800035c:	001312d0 	.word	0x001312d0

08000360 <task3_handler>:
	}
}

void task3_handler( void ) {
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	while ( 1 ) {
		printf( "This is task3\n" ) ;
 8000364:	4807      	ldr	r0, [pc, #28]	; (8000384 <task3_handler+0x24>)
 8000366:	f000 faff 	bl	8000968 <puts>
        led_on( LED_GREEN ) ;
 800036a:	200d      	movs	r0, #13
 800036c:	f7ff ff82 	bl	8000274 <led_on>
        delay( DELAY_COUNT_125MS ) ;
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <task3_handler+0x28>)
 8000372:	f7ff ff6b 	bl	800024c <delay>
        led_off( LED_RED ) ;
 8000376:	200e      	movs	r0, #14
 8000378:	f7ff ff94 	bl	80002a4 <led_off>
        delay( DELAY_COUNT_1S ) ;
 800037c:	4803      	ldr	r0, [pc, #12]	; (800038c <task3_handler+0x2c>)
 800037e:	f7ff ff65 	bl	800024c <delay>
		printf( "This is task3\n" ) ;
 8000382:	e7ef      	b.n	8000364 <task3_handler+0x4>
 8000384:	08001794 	.word	0x08001794
 8000388:	0002625a 	.word	0x0002625a
 800038c:	001312d0 	.word	0x001312d0

08000390 <task4_handler>:
	}
}

void task4_handler( void ) {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	while ( 1 ) {
		printf( "This is task4\n" ) ;
 8000394:	4808      	ldr	r0, [pc, #32]	; (80003b8 <task4_handler+0x28>)
 8000396:	f000 fae7 	bl	8000968 <puts>
        led_on( LED_RED ) ;
 800039a:	200e      	movs	r0, #14
 800039c:	f7ff ff6a 	bl	8000274 <led_on>
        delay( DELAY_COUNT_1MS ) ;
 80003a0:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80003a4:	f7ff ff52 	bl	800024c <delay>
        led_off( LED_RED ) ;
 80003a8:	200e      	movs	r0, #14
 80003aa:	f7ff ff7b 	bl	80002a4 <led_off>
        delay( DELAY_COUNT_1S ) ;
 80003ae:	4803      	ldr	r0, [pc, #12]	; (80003bc <task4_handler+0x2c>)
 80003b0:	f7ff ff4c 	bl	800024c <delay>
		printf( "This is task4\n" ) ;
 80003b4:	e7ee      	b.n	8000394 <task4_handler+0x4>
 80003b6:	bf00      	nop
 80003b8:	080017a4 	.word	0x080017a4
 80003bc:	001312d0 	.word	0x001312d0

080003c0 <init_systick_timer>:
	}
}

void init_systick_timer( uint32_t tick_hz ) {
 80003c0:	b480      	push	{r7}
 80003c2:	b087      	sub	sp, #28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	 * 1. Program Reload Value Count
	 * 2. Clear current value of SVR
	 * 3. Program Control and Status register
	 */
	// Program the reload value
	uint32_t *pSRVR = ( uint32_t* )( 0xE000E014 ) ;							// Address of SysTick Reload Value Register
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <init_systick_timer+0x5c>)
 80003ca:	617b      	str	r3, [r7, #20]
	uint32_t count_value = ( SYSTICK_TIM_CLK / tick_hz ) - 1 ;
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <init_systick_timer+0x60>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d4:	3b01      	subs	r3, #1
 80003d6:	613b      	str	r3, [r7, #16]


	// Clear the value of SVR
	*pSRVR &= ~ ( 0x00FFFFFFFF ) ;									// Only 24 bits are valid in this register
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
	// Load the value into SVR
	*pSRVR |= count_value ;
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	431a      	orrs	r2, r3
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	601a      	str	r2, [r3, #0]

	// Modify the Control and Status Register settings
	uint32_t *pSCSR = ( uint32_t* )( 0xE000E010 ) ;							// Address of SysTick Control and Status Regiser
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <init_systick_timer+0x64>)
 80003ec:	60fb      	str	r3, [r7, #12]
	*pSCSR |= ( 1 << 1 ) ;										// Enables SysTick exception request
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f043 0202 	orr.w	r2, r3, #2
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	601a      	str	r2, [r3, #0]
	*pSCSR |= ( 1 << 2 ) ;										// Indicates the clock source as the processor clock
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f043 0204 	orr.w	r2, r3, #4
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	601a      	str	r2, [r3, #0]

	// Enable the SysTick
	*pSCSR |= ( 1 << 0 ) ;										// Enables the counter
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f043 0201 	orr.w	r2, r3, #1
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	601a      	str	r2, [r3, #0]
}
 8000412:	bf00      	nop
 8000414:	371c      	adds	r7, #28
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	e000e014 	.word	0xe000e014
 8000420:	00f42400 	.word	0x00f42400
 8000424:	e000e010 	.word	0xe000e010

08000428 <init_scheduler_stack>:

__attribute__( (naked) ) void init_scheduler_stack( uint32_t sched_top_of_stack ) {
 8000428:	4603      	mov	r3, r0
//	__asm volatile ( "MSR MSP, R0" ) ;
	__asm volatile( "MSR MSP, %0" : : "r" ( sched_top_of_stack ) : ) ;				// The GCC inline with C variable equivalent of above
 800042a:	f383 8808 	msr	MSP, r3
	__asm volatile ( "BX LR" ) ;									// BX copies the value of LR into PC, where LR contains the return address
 800042e:	4770      	bx	lr
}
 8000430:	bf00      	nop
	...

08000434 <init_tasks_stack>:

void init_tasks_stack( void ) {
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_RUNNING_STATE ;
 800043a:	4b35      	ldr	r3, [pc, #212]	; (8000510 <init_tasks_stack+0xdc>)
 800043c:	2200      	movs	r2, #0
 800043e:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE ;
 8000440:	4b33      	ldr	r3, [pc, #204]	; (8000510 <init_tasks_stack+0xdc>)
 8000442:	2200      	movs	r2, #0
 8000444:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE ;
 8000446:	4b32      	ldr	r3, [pc, #200]	; (8000510 <init_tasks_stack+0xdc>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE ;
 800044e:	4b30      	ldr	r3, [pc, #192]	; (8000510 <init_tasks_stack+0xdc>)
 8000450:	2200      	movs	r2, #0
 8000452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	user_tasks[0].psp_value = T1_STACK_START ;
 8000456:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <init_tasks_stack+0xdc>)
 8000458:	4a2e      	ldr	r2, [pc, #184]	; (8000514 <init_tasks_stack+0xe0>)
 800045a:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T2_STACK_START ;
 800045c:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <init_tasks_stack+0xdc>)
 800045e:	4a2e      	ldr	r2, [pc, #184]	; (8000518 <init_tasks_stack+0xe4>)
 8000460:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T3_STACK_START ;
 8000462:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <init_tasks_stack+0xdc>)
 8000464:	4a2d      	ldr	r2, [pc, #180]	; (800051c <init_tasks_stack+0xe8>)
 8000466:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T4_STACK_START ;
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <init_tasks_stack+0xdc>)
 800046a:	4a2d      	ldr	r2, [pc, #180]	; (8000520 <init_tasks_stack+0xec>)
 800046c:	631a      	str	r2, [r3, #48]	; 0x30

	user_tasks[0].task_handler = task1_handler ;
 800046e:	4b28      	ldr	r3, [pc, #160]	; (8000510 <init_tasks_stack+0xdc>)
 8000470:	4a2c      	ldr	r2, [pc, #176]	; (8000524 <init_tasks_stack+0xf0>)
 8000472:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task2_handler ;
 8000474:	4b26      	ldr	r3, [pc, #152]	; (8000510 <init_tasks_stack+0xdc>)
 8000476:	4a2c      	ldr	r2, [pc, #176]	; (8000528 <init_tasks_stack+0xf4>)
 8000478:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task3_handler ;
 800047a:	4b25      	ldr	r3, [pc, #148]	; (8000510 <init_tasks_stack+0xdc>)
 800047c:	4a2b      	ldr	r2, [pc, #172]	; (800052c <init_tasks_stack+0xf8>)
 800047e:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task4_handler ;
 8000480:	4b23      	ldr	r3, [pc, #140]	; (8000510 <init_tasks_stack+0xdc>)
 8000482:	4a2b      	ldr	r2, [pc, #172]	; (8000530 <init_tasks_stack+0xfc>)
 8000484:	63da      	str	r2, [r3, #60]	; 0x3c

	uint32_t *pPSP ;
	for ( int i = 0 ; i < MAX_TASKS ; i++ ) {
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	e037      	b.n	80004fc <init_tasks_stack+0xc8>
		pPSP = ( uint32_t* )( user_tasks[i].psp_value ) ;
 800048c:	4a20      	ldr	r2, [pc, #128]	; (8000510 <init_tasks_stack+0xdc>)
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	4413      	add	r3, r2
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	60fb      	str	r3, [r7, #12]
		
		pPSP-- ;										// xPSR
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3b04      	subs	r3, #4
 800049c:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR ;									// 0x01000000
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004a4:	601a      	str	r2, [r3, #0]

		pPSP-- ;										// PC
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3b04      	subs	r3, #4
 80004aa:	60fb      	str	r3, [r7, #12]
		*pPSP = ( uint32_t )user_tasks[i].task_handler ;
 80004ac:	4a18      	ldr	r2, [pc, #96]	; (8000510 <init_tasks_stack+0xdc>)
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	4413      	add	r3, r2
 80004b4:	330c      	adds	r3, #12
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	601a      	str	r2, [r3, #0]

		pPSP-- ;										// LR
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD ;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f06f 0202 	mvn.w	r2, #2
 80004ca:	601a      	str	r2, [r3, #0]

		// Registers R0 through R12:
		for ( int j = 0 ; j < 13 ; j++ ) {
 80004cc:	2300      	movs	r3, #0
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	e008      	b.n	80004e4 <init_tasks_stack+0xb0>
			pPSP-- ;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3b04      	subs	r3, #4
 80004d6:	60fb      	str	r3, [r7, #12]
			*pPSP = 0 ;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
		for ( int j = 0 ; j < 13 ; j++ ) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b0c      	cmp	r3, #12
 80004e8:	ddf3      	ble.n	80004d2 <init_tasks_stack+0x9e>
		}

		// Preserve the value of PSP once you have loaded the Stack Frame.
		user_tasks[i].psp_value = ( uint32_t)( pPSP ) ;
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	4908      	ldr	r1, [pc, #32]	; (8000510 <init_tasks_stack+0xdc>)
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	440b      	add	r3, r1
 80004f4:	601a      	str	r2, [r3, #0]
	for ( int i = 0 ; i < MAX_TASKS ; i++ ) {
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	3301      	adds	r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	ddc4      	ble.n	800048c <init_tasks_stack+0x58>
	}
}
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000144 	.word	0x20000144
 8000514:	20020000 	.word	0x20020000
 8000518:	2001fc00 	.word	0x2001fc00
 800051c:	2001f800 	.word	0x2001f800
 8000520:	2001f400 	.word	0x2001f400
 8000524:	08000309 	.word	0x08000309
 8000528:	08000335 	.word	0x08000335
 800052c:	08000361 	.word	0x08000361
 8000530:	08000391 	.word	0x08000391

08000534 <enable_processor_faults>:

void enable_processor_faults( void ) {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = ( uint32_t* )( 0xE000ED24 ) ;						// System Handler Control & State Register
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <enable_processor_faults+0x38>)
 800053c:	607b      	str	r3, [r7, #4]
	*pSHCSR |= ( 1 << 16 ) ;	// Memory Manage
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17 ) ;	// Bus Fault
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18 ) ;	// Usage Fault
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	e000ed24 	.word	0xe000ed24

08000570 <get_psp_value>:

uint32_t get_psp_value( void ) {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value ;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <get_psp_value+0x18>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <get_psp_value+0x1c>)
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	4413      	add	r3, r2
 800057e:	681b      	ldr	r3, [r3, #0]
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	20000088 	.word	0x20000088
 800058c:	20000144 	.word	0x20000144

08000590 <save_psp_value>:

void save_psp_value( uint32_t current_psp_value ) {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value ;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <save_psp_value+0x20>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <save_psp_value+0x24>)
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	4413      	add	r3, r2
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000088 	.word	0x20000088
 80005b4:	20000144 	.word	0x20000144

080005b8 <update_next_task>:

void update_next_task( void ) {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	current_task++ ;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <update_next_task+0x28>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <update_next_task+0x28>)
 80005c6:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS ;									// Task 0 through 3
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <update_next_task+0x28>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	f003 0303 	and.w	r3, r3, #3
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <update_next_task+0x28>)
 80005d4:	701a      	strb	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000088 	.word	0x20000088

080005e4 <switch_sp_to_psp>:
	 *
	 * Also, since this function is called from main(), LR is holding some value that connects to main(). We call
	 * get_psp_value() in the function, though, so LR gets corrupted.
	 * Thus, we have to PUSH (save) LR because we want it later. We then pop it back.
	 */
	__asm volatile ( "PUSH {LR} " ) ;								// Preserve LR, which connects back to main()
 80005e4:	b500      	push	{lr}
	__asm volatile ( "BL get_psp_value" ) ;								// Branch and link to come back to the function; branch only takes you to the function
 80005e6:	f7ff ffc3 	bl	8000570 <get_psp_value>
	__asm volatile ( "MSR PSP, R0" ) ;								// Initialize PSP
 80005ea:	f380 8809 	msr	PSP, r0
	__asm volatile ( "POP {LR} " ) ;								// Pops back LR value
 80005ee:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. Change SP to PSP using CONTROL register
	// The CONTROL register is a special register, thus the function must be a naked function
	__asm volatile ( "MOV R0, #0x02" ) ;								// Refer to M4 User Manual: Switch to PSP
 80005f2:	f04f 0002 	mov.w	r0, #2
	__asm volatile ( "MSR CONTROL, R0" ) ;
 80005f6:	f380 8814 	msr	CONTROL, r0
	__asm volatile ( "BX LR" ) ;									// LR will be copied into PC, which takes us back to main()
 80005fa:	4770      	bx	lr
}
 80005fc:	bf00      	nop

080005fe <SysTick_Handler>:
__attribute__( (naked) ) void SysTick_Handler( void ) {

	/* Save the context of current task */

	// 1. Get current running task's PSP value
	__asm volatile ( "MRS R0, PSP" ) ;	
 80005fe:	f3ef 8009 	mrs	r0, PSP
	// 2. Using that PSP value, store SF2 (R4 to R11)
	__asm volatile ( "STMDB R0!, {R4-R11}" ) ;							// Store multiple registers into memory; "!" allows R0 to get updated after each store
 8000602:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ( "PUSH {LR}" ) ;
 8000606:	b500      	push	{lr}
	// 3. Save the current value of PSP
	__asm volatile ( "BL save_psp_value" ) ;	
 8000608:	f7ff ffc2 	bl	8000590 <save_psp_value>


	/* Retrieve the context of the next task */
	
	// 1. Decide next task to run
	__asm volatile ( "BL update_next_task" ) ;		
 800060c:	f7ff ffd4 	bl	80005b8 <update_next_task>
	// 2. Get its past PSP value
	__asm volatile ( "BL get_psp_value" ) ;
 8000610:	f7ff ffae 	bl	8000570 <get_psp_value>
	// 3. Using that PSP value, retrieve SF2 (R4 to R11)
	__asm volatile ( "LDMIA R0!, {R4-R11}" ) ;
 8000614:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// 4. Update PSP and exit
	__asm volatile ( "MSR PSP, R0" ) ;
 8000618:	f380 8809 	msr	PSP, r0
	__asm volatile ( "POP {LR}" ) ;
 800061c:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile ( "BX LR" ) ;
 8000620:	4770      	bx	lr
	 * Next we load multiple registers (R4 through R11) and update/increment R0 after each store.
	 * We then store the general register R0 into PSP
	 * and then POP LR.
	 * Finally, we do a branch indirect LR so that we can return to main()
	 */
}
 8000622:	bf00      	nop

08000624 <HardFault_Handler>:

// 2. Implement the fault handlers
void HardFault_Handler( void ) {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	fprintf( stderr, "Exception: Hardfault\n" ) ;
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <HardFault_Handler+0x18>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	2215      	movs	r2, #21
 8000630:	2101      	movs	r1, #1
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <HardFault_Handler+0x1c>)
 8000634:	f000 f8ec 	bl	8000810 <fwrite>
	while( 1 ) ;
 8000638:	e7fe      	b.n	8000638 <HardFault_Handler+0x14>
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000
 8000640:	080017b4 	.word	0x080017b4

08000644 <MemManage_Handler>:
}

void MemManage_Handler( void ) {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	fprintf( stderr, "Exception: MemManage\n" ) ;
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <MemManage_Handler+0x18>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	2215      	movs	r2, #21
 8000650:	2101      	movs	r1, #1
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <MemManage_Handler+0x1c>)
 8000654:	f000 f8dc 	bl	8000810 <fwrite>
	while( 1 ) ;
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x14>
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000
 8000660:	080017cc 	.word	0x080017cc

08000664 <BusFault_Handler>:
}

void BusFault_Handler( void ) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	fprintf( stderr, "Exception: Busfault\n" ) ;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <BusFault_Handler+0x18>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	2214      	movs	r2, #20
 8000670:	2101      	movs	r1, #1
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <BusFault_Handler+0x1c>)
 8000674:	f000 f8cc 	bl	8000810 <fwrite>
	while( 1 ) ;
 8000678:	e7fe      	b.n	8000678 <BusFault_Handler+0x14>
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000
 8000680:	080017e4 	.word	0x080017e4

08000684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <_sbrk+0x5c>)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <_sbrk+0x60>)
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <_sbrk+0x64>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <_sbrk+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d207      	bcs.n	80006c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b4:	f000 f846 	bl	8000744 <__errno>
 80006b8:	4603      	mov	r3, r0
 80006ba:	220c      	movs	r2, #12
 80006bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	e009      	b.n	80006d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <_sbrk+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20030000 	.word	0x20030000
 80006e4:	00000400 	.word	0x00000400
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	20000198 	.word	0x20000198

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <LoopForever+0x16>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071e:	f000 f885 	bl	800082c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fdd7 	bl	80002d4 <main>

08000726 <LoopForever>:

LoopForever:
    b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   r0, =_estack
 8000728:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000734:	08001884 	.word	0x08001884
  ldr r2, =_sbss
 8000738:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800073c:	20000194 	.word	0x20000194

08000740 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC_IRQHandler>
	...

08000744 <__errno>:
 8000744:	4b01      	ldr	r3, [pc, #4]	; (800074c <__errno+0x8>)
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000000 	.word	0x20000000

08000750 <_fwrite_r>:
 8000750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000754:	9c08      	ldr	r4, [sp, #32]
 8000756:	4689      	mov	r9, r1
 8000758:	4617      	mov	r7, r2
 800075a:	fb02 f803 	mul.w	r8, r2, r3
 800075e:	4605      	mov	r5, r0
 8000760:	b118      	cbz	r0, 800076a <_fwrite_r+0x1a>
 8000762:	6983      	ldr	r3, [r0, #24]
 8000764:	b90b      	cbnz	r3, 800076a <_fwrite_r+0x1a>
 8000766:	f000 fae1 	bl	8000d2c <__sinit>
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <_fwrite_r+0xb4>)
 800076c:	429c      	cmp	r4, r3
 800076e:	d123      	bne.n	80007b8 <_fwrite_r+0x68>
 8000770:	686c      	ldr	r4, [r5, #4]
 8000772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000774:	07de      	lsls	r6, r3, #31
 8000776:	d405      	bmi.n	8000784 <_fwrite_r+0x34>
 8000778:	89a3      	ldrh	r3, [r4, #12]
 800077a:	0598      	lsls	r0, r3, #22
 800077c:	d402      	bmi.n	8000784 <_fwrite_r+0x34>
 800077e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000780:	f000 f879 	bl	8000876 <__retarget_lock_acquire_recursive>
 8000784:	89a3      	ldrh	r3, [r4, #12]
 8000786:	0719      	lsls	r1, r3, #28
 8000788:	d520      	bpl.n	80007cc <_fwrite_r+0x7c>
 800078a:	6923      	ldr	r3, [r4, #16]
 800078c:	b1f3      	cbz	r3, 80007cc <_fwrite_r+0x7c>
 800078e:	2600      	movs	r6, #0
 8000790:	4546      	cmp	r6, r8
 8000792:	d029      	beq.n	80007e8 <_fwrite_r+0x98>
 8000794:	68a0      	ldr	r0, [r4, #8]
 8000796:	f819 1006 	ldrb.w	r1, [r9, r6]
 800079a:	3801      	subs	r0, #1
 800079c:	2800      	cmp	r0, #0
 800079e:	60a0      	str	r0, [r4, #8]
 80007a0:	da04      	bge.n	80007ac <_fwrite_r+0x5c>
 80007a2:	69a3      	ldr	r3, [r4, #24]
 80007a4:	4298      	cmp	r0, r3
 80007a6:	db19      	blt.n	80007dc <_fwrite_r+0x8c>
 80007a8:	290a      	cmp	r1, #10
 80007aa:	d017      	beq.n	80007dc <_fwrite_r+0x8c>
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	6022      	str	r2, [r4, #0]
 80007b2:	7019      	strb	r1, [r3, #0]
 80007b4:	3601      	adds	r6, #1
 80007b6:	e7eb      	b.n	8000790 <_fwrite_r+0x40>
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <_fwrite_r+0xb8>)
 80007ba:	429c      	cmp	r4, r3
 80007bc:	d101      	bne.n	80007c2 <_fwrite_r+0x72>
 80007be:	68ac      	ldr	r4, [r5, #8]
 80007c0:	e7d7      	b.n	8000772 <_fwrite_r+0x22>
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <_fwrite_r+0xbc>)
 80007c4:	429c      	cmp	r4, r3
 80007c6:	bf08      	it	eq
 80007c8:	68ec      	ldreq	r4, [r5, #12]
 80007ca:	e7d2      	b.n	8000772 <_fwrite_r+0x22>
 80007cc:	4621      	mov	r1, r4
 80007ce:	4628      	mov	r0, r5
 80007d0:	f000 f924 	bl	8000a1c <__swsetup_r>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d0da      	beq.n	800078e <_fwrite_r+0x3e>
 80007d8:	2600      	movs	r6, #0
 80007da:	e005      	b.n	80007e8 <_fwrite_r+0x98>
 80007dc:	4622      	mov	r2, r4
 80007de:	4628      	mov	r0, r5
 80007e0:	f000 f8ca 	bl	8000978 <__swbuf_r>
 80007e4:	3001      	adds	r0, #1
 80007e6:	d1e5      	bne.n	80007b4 <_fwrite_r+0x64>
 80007e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ea:	07da      	lsls	r2, r3, #31
 80007ec:	d405      	bmi.n	80007fa <_fwrite_r+0xaa>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	059b      	lsls	r3, r3, #22
 80007f2:	d402      	bmi.n	80007fa <_fwrite_r+0xaa>
 80007f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007f6:	f000 f83f 	bl	8000878 <__retarget_lock_release_recursive>
 80007fa:	fbb6 f0f7 	udiv	r0, r6, r7
 80007fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000802:	bf00      	nop
 8000804:	08001820 	.word	0x08001820
 8000808:	08001840 	.word	0x08001840
 800080c:	08001800 	.word	0x08001800

08000810 <fwrite>:
 8000810:	b507      	push	{r0, r1, r2, lr}
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	4613      	mov	r3, r2
 8000816:	460a      	mov	r2, r1
 8000818:	4601      	mov	r1, r0
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <fwrite+0x18>)
 800081c:	6800      	ldr	r0, [r0, #0]
 800081e:	f7ff ff97 	bl	8000750 <_fwrite_r>
 8000822:	b003      	add	sp, #12
 8000824:	f85d fb04 	ldr.w	pc, [sp], #4
 8000828:	20000000 	.word	0x20000000

0800082c <__libc_init_array>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	4d0d      	ldr	r5, [pc, #52]	; (8000864 <__libc_init_array+0x38>)
 8000830:	4c0d      	ldr	r4, [pc, #52]	; (8000868 <__libc_init_array+0x3c>)
 8000832:	1b64      	subs	r4, r4, r5
 8000834:	10a4      	asrs	r4, r4, #2
 8000836:	2600      	movs	r6, #0
 8000838:	42a6      	cmp	r6, r4
 800083a:	d109      	bne.n	8000850 <__libc_init_array+0x24>
 800083c:	4d0b      	ldr	r5, [pc, #44]	; (800086c <__libc_init_array+0x40>)
 800083e:	4c0c      	ldr	r4, [pc, #48]	; (8000870 <__libc_init_array+0x44>)
 8000840:	f000 ff8c 	bl	800175c <_init>
 8000844:	1b64      	subs	r4, r4, r5
 8000846:	10a4      	asrs	r4, r4, #2
 8000848:	2600      	movs	r6, #0
 800084a:	42a6      	cmp	r6, r4
 800084c:	d105      	bne.n	800085a <__libc_init_array+0x2e>
 800084e:	bd70      	pop	{r4, r5, r6, pc}
 8000850:	f855 3b04 	ldr.w	r3, [r5], #4
 8000854:	4798      	blx	r3
 8000856:	3601      	adds	r6, #1
 8000858:	e7ee      	b.n	8000838 <__libc_init_array+0xc>
 800085a:	f855 3b04 	ldr.w	r3, [r5], #4
 800085e:	4798      	blx	r3
 8000860:	3601      	adds	r6, #1
 8000862:	e7f2      	b.n	800084a <__libc_init_array+0x1e>
 8000864:	0800187c 	.word	0x0800187c
 8000868:	0800187c 	.word	0x0800187c
 800086c:	0800187c 	.word	0x0800187c
 8000870:	08001880 	.word	0x08001880

08000874 <__retarget_lock_init_recursive>:
 8000874:	4770      	bx	lr

08000876 <__retarget_lock_acquire_recursive>:
 8000876:	4770      	bx	lr

08000878 <__retarget_lock_release_recursive>:
 8000878:	4770      	bx	lr

0800087a <memset>:
 800087a:	4402      	add	r2, r0
 800087c:	4603      	mov	r3, r0
 800087e:	4293      	cmp	r3, r2
 8000880:	d100      	bne.n	8000884 <memset+0xa>
 8000882:	4770      	bx	lr
 8000884:	f803 1b01 	strb.w	r1, [r3], #1
 8000888:	e7f9      	b.n	800087e <memset+0x4>
	...

0800088c <_puts_r>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	460e      	mov	r6, r1
 8000890:	4605      	mov	r5, r0
 8000892:	b118      	cbz	r0, 800089c <_puts_r+0x10>
 8000894:	6983      	ldr	r3, [r0, #24]
 8000896:	b90b      	cbnz	r3, 800089c <_puts_r+0x10>
 8000898:	f000 fa48 	bl	8000d2c <__sinit>
 800089c:	69ab      	ldr	r3, [r5, #24]
 800089e:	68ac      	ldr	r4, [r5, #8]
 80008a0:	b913      	cbnz	r3, 80008a8 <_puts_r+0x1c>
 80008a2:	4628      	mov	r0, r5
 80008a4:	f000 fa42 	bl	8000d2c <__sinit>
 80008a8:	4b2c      	ldr	r3, [pc, #176]	; (800095c <_puts_r+0xd0>)
 80008aa:	429c      	cmp	r4, r3
 80008ac:	d120      	bne.n	80008f0 <_puts_r+0x64>
 80008ae:	686c      	ldr	r4, [r5, #4]
 80008b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008b2:	07db      	lsls	r3, r3, #31
 80008b4:	d405      	bmi.n	80008c2 <_puts_r+0x36>
 80008b6:	89a3      	ldrh	r3, [r4, #12]
 80008b8:	0598      	lsls	r0, r3, #22
 80008ba:	d402      	bmi.n	80008c2 <_puts_r+0x36>
 80008bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008be:	f7ff ffda 	bl	8000876 <__retarget_lock_acquire_recursive>
 80008c2:	89a3      	ldrh	r3, [r4, #12]
 80008c4:	0719      	lsls	r1, r3, #28
 80008c6:	d51d      	bpl.n	8000904 <_puts_r+0x78>
 80008c8:	6923      	ldr	r3, [r4, #16]
 80008ca:	b1db      	cbz	r3, 8000904 <_puts_r+0x78>
 80008cc:	3e01      	subs	r6, #1
 80008ce:	68a3      	ldr	r3, [r4, #8]
 80008d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008d4:	3b01      	subs	r3, #1
 80008d6:	60a3      	str	r3, [r4, #8]
 80008d8:	bb39      	cbnz	r1, 800092a <_puts_r+0x9e>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da38      	bge.n	8000950 <_puts_r+0xc4>
 80008de:	4622      	mov	r2, r4
 80008e0:	210a      	movs	r1, #10
 80008e2:	4628      	mov	r0, r5
 80008e4:	f000 f848 	bl	8000978 <__swbuf_r>
 80008e8:	3001      	adds	r0, #1
 80008ea:	d011      	beq.n	8000910 <_puts_r+0x84>
 80008ec:	250a      	movs	r5, #10
 80008ee:	e011      	b.n	8000914 <_puts_r+0x88>
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <_puts_r+0xd4>)
 80008f2:	429c      	cmp	r4, r3
 80008f4:	d101      	bne.n	80008fa <_puts_r+0x6e>
 80008f6:	68ac      	ldr	r4, [r5, #8]
 80008f8:	e7da      	b.n	80008b0 <_puts_r+0x24>
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <_puts_r+0xd8>)
 80008fc:	429c      	cmp	r4, r3
 80008fe:	bf08      	it	eq
 8000900:	68ec      	ldreq	r4, [r5, #12]
 8000902:	e7d5      	b.n	80008b0 <_puts_r+0x24>
 8000904:	4621      	mov	r1, r4
 8000906:	4628      	mov	r0, r5
 8000908:	f000 f888 	bl	8000a1c <__swsetup_r>
 800090c:	2800      	cmp	r0, #0
 800090e:	d0dd      	beq.n	80008cc <_puts_r+0x40>
 8000910:	f04f 35ff 	mov.w	r5, #4294967295
 8000914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000916:	07da      	lsls	r2, r3, #31
 8000918:	d405      	bmi.n	8000926 <_puts_r+0x9a>
 800091a:	89a3      	ldrh	r3, [r4, #12]
 800091c:	059b      	lsls	r3, r3, #22
 800091e:	d402      	bmi.n	8000926 <_puts_r+0x9a>
 8000920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000922:	f7ff ffa9 	bl	8000878 <__retarget_lock_release_recursive>
 8000926:	4628      	mov	r0, r5
 8000928:	bd70      	pop	{r4, r5, r6, pc}
 800092a:	2b00      	cmp	r3, #0
 800092c:	da04      	bge.n	8000938 <_puts_r+0xac>
 800092e:	69a2      	ldr	r2, [r4, #24]
 8000930:	429a      	cmp	r2, r3
 8000932:	dc06      	bgt.n	8000942 <_puts_r+0xb6>
 8000934:	290a      	cmp	r1, #10
 8000936:	d004      	beq.n	8000942 <_puts_r+0xb6>
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	6022      	str	r2, [r4, #0]
 800093e:	7019      	strb	r1, [r3, #0]
 8000940:	e7c5      	b.n	80008ce <_puts_r+0x42>
 8000942:	4622      	mov	r2, r4
 8000944:	4628      	mov	r0, r5
 8000946:	f000 f817 	bl	8000978 <__swbuf_r>
 800094a:	3001      	adds	r0, #1
 800094c:	d1bf      	bne.n	80008ce <_puts_r+0x42>
 800094e:	e7df      	b.n	8000910 <_puts_r+0x84>
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	250a      	movs	r5, #10
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	6022      	str	r2, [r4, #0]
 8000958:	701d      	strb	r5, [r3, #0]
 800095a:	e7db      	b.n	8000914 <_puts_r+0x88>
 800095c:	08001820 	.word	0x08001820
 8000960:	08001840 	.word	0x08001840
 8000964:	08001800 	.word	0x08001800

08000968 <puts>:
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <puts+0xc>)
 800096a:	4601      	mov	r1, r0
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	f7ff bf8d 	b.w	800088c <_puts_r>
 8000972:	bf00      	nop
 8000974:	20000000 	.word	0x20000000

08000978 <__swbuf_r>:
 8000978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097a:	460e      	mov	r6, r1
 800097c:	4614      	mov	r4, r2
 800097e:	4605      	mov	r5, r0
 8000980:	b118      	cbz	r0, 800098a <__swbuf_r+0x12>
 8000982:	6983      	ldr	r3, [r0, #24]
 8000984:	b90b      	cbnz	r3, 800098a <__swbuf_r+0x12>
 8000986:	f000 f9d1 	bl	8000d2c <__sinit>
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <__swbuf_r+0x98>)
 800098c:	429c      	cmp	r4, r3
 800098e:	d12b      	bne.n	80009e8 <__swbuf_r+0x70>
 8000990:	686c      	ldr	r4, [r5, #4]
 8000992:	69a3      	ldr	r3, [r4, #24]
 8000994:	60a3      	str	r3, [r4, #8]
 8000996:	89a3      	ldrh	r3, [r4, #12]
 8000998:	071a      	lsls	r2, r3, #28
 800099a:	d52f      	bpl.n	80009fc <__swbuf_r+0x84>
 800099c:	6923      	ldr	r3, [r4, #16]
 800099e:	b36b      	cbz	r3, 80009fc <__swbuf_r+0x84>
 80009a0:	6923      	ldr	r3, [r4, #16]
 80009a2:	6820      	ldr	r0, [r4, #0]
 80009a4:	1ac0      	subs	r0, r0, r3
 80009a6:	6963      	ldr	r3, [r4, #20]
 80009a8:	b2f6      	uxtb	r6, r6
 80009aa:	4283      	cmp	r3, r0
 80009ac:	4637      	mov	r7, r6
 80009ae:	dc04      	bgt.n	80009ba <__swbuf_r+0x42>
 80009b0:	4621      	mov	r1, r4
 80009b2:	4628      	mov	r0, r5
 80009b4:	f000 f926 	bl	8000c04 <_fflush_r>
 80009b8:	bb30      	cbnz	r0, 8000a08 <__swbuf_r+0x90>
 80009ba:	68a3      	ldr	r3, [r4, #8]
 80009bc:	3b01      	subs	r3, #1
 80009be:	60a3      	str	r3, [r4, #8]
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	6022      	str	r2, [r4, #0]
 80009c6:	701e      	strb	r6, [r3, #0]
 80009c8:	6963      	ldr	r3, [r4, #20]
 80009ca:	3001      	adds	r0, #1
 80009cc:	4283      	cmp	r3, r0
 80009ce:	d004      	beq.n	80009da <__swbuf_r+0x62>
 80009d0:	89a3      	ldrh	r3, [r4, #12]
 80009d2:	07db      	lsls	r3, r3, #31
 80009d4:	d506      	bpl.n	80009e4 <__swbuf_r+0x6c>
 80009d6:	2e0a      	cmp	r6, #10
 80009d8:	d104      	bne.n	80009e4 <__swbuf_r+0x6c>
 80009da:	4621      	mov	r1, r4
 80009dc:	4628      	mov	r0, r5
 80009de:	f000 f911 	bl	8000c04 <_fflush_r>
 80009e2:	b988      	cbnz	r0, 8000a08 <__swbuf_r+0x90>
 80009e4:	4638      	mov	r0, r7
 80009e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <__swbuf_r+0x9c>)
 80009ea:	429c      	cmp	r4, r3
 80009ec:	d101      	bne.n	80009f2 <__swbuf_r+0x7a>
 80009ee:	68ac      	ldr	r4, [r5, #8]
 80009f0:	e7cf      	b.n	8000992 <__swbuf_r+0x1a>
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <__swbuf_r+0xa0>)
 80009f4:	429c      	cmp	r4, r3
 80009f6:	bf08      	it	eq
 80009f8:	68ec      	ldreq	r4, [r5, #12]
 80009fa:	e7ca      	b.n	8000992 <__swbuf_r+0x1a>
 80009fc:	4621      	mov	r1, r4
 80009fe:	4628      	mov	r0, r5
 8000a00:	f000 f80c 	bl	8000a1c <__swsetup_r>
 8000a04:	2800      	cmp	r0, #0
 8000a06:	d0cb      	beq.n	80009a0 <__swbuf_r+0x28>
 8000a08:	f04f 37ff 	mov.w	r7, #4294967295
 8000a0c:	e7ea      	b.n	80009e4 <__swbuf_r+0x6c>
 8000a0e:	bf00      	nop
 8000a10:	08001820 	.word	0x08001820
 8000a14:	08001840 	.word	0x08001840
 8000a18:	08001800 	.word	0x08001800

08000a1c <__swsetup_r>:
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <__swsetup_r+0xcc>)
 8000a1e:	b570      	push	{r4, r5, r6, lr}
 8000a20:	681d      	ldr	r5, [r3, #0]
 8000a22:	4606      	mov	r6, r0
 8000a24:	460c      	mov	r4, r1
 8000a26:	b125      	cbz	r5, 8000a32 <__swsetup_r+0x16>
 8000a28:	69ab      	ldr	r3, [r5, #24]
 8000a2a:	b913      	cbnz	r3, 8000a32 <__swsetup_r+0x16>
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	f000 f97d 	bl	8000d2c <__sinit>
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <__swsetup_r+0xd0>)
 8000a34:	429c      	cmp	r4, r3
 8000a36:	d10f      	bne.n	8000a58 <__swsetup_r+0x3c>
 8000a38:	686c      	ldr	r4, [r5, #4]
 8000a3a:	89a3      	ldrh	r3, [r4, #12]
 8000a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a40:	0719      	lsls	r1, r3, #28
 8000a42:	d42c      	bmi.n	8000a9e <__swsetup_r+0x82>
 8000a44:	06dd      	lsls	r5, r3, #27
 8000a46:	d411      	bmi.n	8000a6c <__swsetup_r+0x50>
 8000a48:	2309      	movs	r3, #9
 8000a4a:	6033      	str	r3, [r6, #0]
 8000a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a50:	81a3      	strh	r3, [r4, #12]
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295
 8000a56:	e03e      	b.n	8000ad6 <__swsetup_r+0xba>
 8000a58:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <__swsetup_r+0xd4>)
 8000a5a:	429c      	cmp	r4, r3
 8000a5c:	d101      	bne.n	8000a62 <__swsetup_r+0x46>
 8000a5e:	68ac      	ldr	r4, [r5, #8]
 8000a60:	e7eb      	b.n	8000a3a <__swsetup_r+0x1e>
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <__swsetup_r+0xd8>)
 8000a64:	429c      	cmp	r4, r3
 8000a66:	bf08      	it	eq
 8000a68:	68ec      	ldreq	r4, [r5, #12]
 8000a6a:	e7e6      	b.n	8000a3a <__swsetup_r+0x1e>
 8000a6c:	0758      	lsls	r0, r3, #29
 8000a6e:	d512      	bpl.n	8000a96 <__swsetup_r+0x7a>
 8000a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a72:	b141      	cbz	r1, 8000a86 <__swsetup_r+0x6a>
 8000a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a78:	4299      	cmp	r1, r3
 8000a7a:	d002      	beq.n	8000a82 <__swsetup_r+0x66>
 8000a7c:	4630      	mov	r0, r6
 8000a7e:	f000 fa57 	bl	8000f30 <_free_r>
 8000a82:	2300      	movs	r3, #0
 8000a84:	6363      	str	r3, [r4, #52]	; 0x34
 8000a86:	89a3      	ldrh	r3, [r4, #12]
 8000a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a8c:	81a3      	strh	r3, [r4, #12]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	6063      	str	r3, [r4, #4]
 8000a92:	6923      	ldr	r3, [r4, #16]
 8000a94:	6023      	str	r3, [r4, #0]
 8000a96:	89a3      	ldrh	r3, [r4, #12]
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	81a3      	strh	r3, [r4, #12]
 8000a9e:	6923      	ldr	r3, [r4, #16]
 8000aa0:	b94b      	cbnz	r3, 8000ab6 <__swsetup_r+0x9a>
 8000aa2:	89a3      	ldrh	r3, [r4, #12]
 8000aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aac:	d003      	beq.n	8000ab6 <__swsetup_r+0x9a>
 8000aae:	4621      	mov	r1, r4
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	f000 f9fd 	bl	8000eb0 <__smakebuf_r>
 8000ab6:	89a0      	ldrh	r0, [r4, #12]
 8000ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000abc:	f010 0301 	ands.w	r3, r0, #1
 8000ac0:	d00a      	beq.n	8000ad8 <__swsetup_r+0xbc>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60a3      	str	r3, [r4, #8]
 8000ac6:	6963      	ldr	r3, [r4, #20]
 8000ac8:	425b      	negs	r3, r3
 8000aca:	61a3      	str	r3, [r4, #24]
 8000acc:	6923      	ldr	r3, [r4, #16]
 8000ace:	b943      	cbnz	r3, 8000ae2 <__swsetup_r+0xc6>
 8000ad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ad4:	d1ba      	bne.n	8000a4c <__swsetup_r+0x30>
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	0781      	lsls	r1, r0, #30
 8000ada:	bf58      	it	pl
 8000adc:	6963      	ldrpl	r3, [r4, #20]
 8000ade:	60a3      	str	r3, [r4, #8]
 8000ae0:	e7f4      	b.n	8000acc <__swsetup_r+0xb0>
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e7f7      	b.n	8000ad6 <__swsetup_r+0xba>
 8000ae6:	bf00      	nop
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	08001820 	.word	0x08001820
 8000af0:	08001840 	.word	0x08001840
 8000af4:	08001800 	.word	0x08001800

08000af8 <__sflush_r>:
 8000af8:	898a      	ldrh	r2, [r1, #12]
 8000afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000afe:	4605      	mov	r5, r0
 8000b00:	0710      	lsls	r0, r2, #28
 8000b02:	460c      	mov	r4, r1
 8000b04:	d458      	bmi.n	8000bb8 <__sflush_r+0xc0>
 8000b06:	684b      	ldr	r3, [r1, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	dc05      	bgt.n	8000b18 <__sflush_r+0x20>
 8000b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	dc02      	bgt.n	8000b18 <__sflush_r+0x20>
 8000b12:	2000      	movs	r0, #0
 8000b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d0f9      	beq.n	8000b12 <__sflush_r+0x1a>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b24:	682f      	ldr	r7, [r5, #0]
 8000b26:	602b      	str	r3, [r5, #0]
 8000b28:	d032      	beq.n	8000b90 <__sflush_r+0x98>
 8000b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b2c:	89a3      	ldrh	r3, [r4, #12]
 8000b2e:	075a      	lsls	r2, r3, #29
 8000b30:	d505      	bpl.n	8000b3e <__sflush_r+0x46>
 8000b32:	6863      	ldr	r3, [r4, #4]
 8000b34:	1ac0      	subs	r0, r0, r3
 8000b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b38:	b10b      	cbz	r3, 8000b3e <__sflush_r+0x46>
 8000b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b3c:	1ac0      	subs	r0, r0, r3
 8000b3e:	2300      	movs	r3, #0
 8000b40:	4602      	mov	r2, r0
 8000b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b44:	6a21      	ldr	r1, [r4, #32]
 8000b46:	4628      	mov	r0, r5
 8000b48:	47b0      	blx	r6
 8000b4a:	1c43      	adds	r3, r0, #1
 8000b4c:	89a3      	ldrh	r3, [r4, #12]
 8000b4e:	d106      	bne.n	8000b5e <__sflush_r+0x66>
 8000b50:	6829      	ldr	r1, [r5, #0]
 8000b52:	291d      	cmp	r1, #29
 8000b54:	d82c      	bhi.n	8000bb0 <__sflush_r+0xb8>
 8000b56:	4a2a      	ldr	r2, [pc, #168]	; (8000c00 <__sflush_r+0x108>)
 8000b58:	40ca      	lsrs	r2, r1
 8000b5a:	07d6      	lsls	r6, r2, #31
 8000b5c:	d528      	bpl.n	8000bb0 <__sflush_r+0xb8>
 8000b5e:	2200      	movs	r2, #0
 8000b60:	6062      	str	r2, [r4, #4]
 8000b62:	04d9      	lsls	r1, r3, #19
 8000b64:	6922      	ldr	r2, [r4, #16]
 8000b66:	6022      	str	r2, [r4, #0]
 8000b68:	d504      	bpl.n	8000b74 <__sflush_r+0x7c>
 8000b6a:	1c42      	adds	r2, r0, #1
 8000b6c:	d101      	bne.n	8000b72 <__sflush_r+0x7a>
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	b903      	cbnz	r3, 8000b74 <__sflush_r+0x7c>
 8000b72:	6560      	str	r0, [r4, #84]	; 0x54
 8000b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b76:	602f      	str	r7, [r5, #0]
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	d0ca      	beq.n	8000b12 <__sflush_r+0x1a>
 8000b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d002      	beq.n	8000b8a <__sflush_r+0x92>
 8000b84:	4628      	mov	r0, r5
 8000b86:	f000 f9d3 	bl	8000f30 <_free_r>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8000b8e:	e7c1      	b.n	8000b14 <__sflush_r+0x1c>
 8000b90:	6a21      	ldr	r1, [r4, #32]
 8000b92:	2301      	movs	r3, #1
 8000b94:	4628      	mov	r0, r5
 8000b96:	47b0      	blx	r6
 8000b98:	1c41      	adds	r1, r0, #1
 8000b9a:	d1c7      	bne.n	8000b2c <__sflush_r+0x34>
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0c4      	beq.n	8000b2c <__sflush_r+0x34>
 8000ba2:	2b1d      	cmp	r3, #29
 8000ba4:	d001      	beq.n	8000baa <__sflush_r+0xb2>
 8000ba6:	2b16      	cmp	r3, #22
 8000ba8:	d101      	bne.n	8000bae <__sflush_r+0xb6>
 8000baa:	602f      	str	r7, [r5, #0]
 8000bac:	e7b1      	b.n	8000b12 <__sflush_r+0x1a>
 8000bae:	89a3      	ldrh	r3, [r4, #12]
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	81a3      	strh	r3, [r4, #12]
 8000bb6:	e7ad      	b.n	8000b14 <__sflush_r+0x1c>
 8000bb8:	690f      	ldr	r7, [r1, #16]
 8000bba:	2f00      	cmp	r7, #0
 8000bbc:	d0a9      	beq.n	8000b12 <__sflush_r+0x1a>
 8000bbe:	0793      	lsls	r3, r2, #30
 8000bc0:	680e      	ldr	r6, [r1, #0]
 8000bc2:	bf08      	it	eq
 8000bc4:	694b      	ldreq	r3, [r1, #20]
 8000bc6:	600f      	str	r7, [r1, #0]
 8000bc8:	bf18      	it	ne
 8000bca:	2300      	movne	r3, #0
 8000bcc:	eba6 0807 	sub.w	r8, r6, r7
 8000bd0:	608b      	str	r3, [r1, #8]
 8000bd2:	f1b8 0f00 	cmp.w	r8, #0
 8000bd6:	dd9c      	ble.n	8000b12 <__sflush_r+0x1a>
 8000bd8:	6a21      	ldr	r1, [r4, #32]
 8000bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000bdc:	4643      	mov	r3, r8
 8000bde:	463a      	mov	r2, r7
 8000be0:	4628      	mov	r0, r5
 8000be2:	47b0      	blx	r6
 8000be4:	2800      	cmp	r0, #0
 8000be6:	dc06      	bgt.n	8000bf6 <__sflush_r+0xfe>
 8000be8:	89a3      	ldrh	r3, [r4, #12]
 8000bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bee:	81a3      	strh	r3, [r4, #12]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	e78e      	b.n	8000b14 <__sflush_r+0x1c>
 8000bf6:	4407      	add	r7, r0
 8000bf8:	eba8 0800 	sub.w	r8, r8, r0
 8000bfc:	e7e9      	b.n	8000bd2 <__sflush_r+0xda>
 8000bfe:	bf00      	nop
 8000c00:	20400001 	.word	0x20400001

08000c04 <_fflush_r>:
 8000c04:	b538      	push	{r3, r4, r5, lr}
 8000c06:	690b      	ldr	r3, [r1, #16]
 8000c08:	4605      	mov	r5, r0
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	b913      	cbnz	r3, 8000c14 <_fflush_r+0x10>
 8000c0e:	2500      	movs	r5, #0
 8000c10:	4628      	mov	r0, r5
 8000c12:	bd38      	pop	{r3, r4, r5, pc}
 8000c14:	b118      	cbz	r0, 8000c1e <_fflush_r+0x1a>
 8000c16:	6983      	ldr	r3, [r0, #24]
 8000c18:	b90b      	cbnz	r3, 8000c1e <_fflush_r+0x1a>
 8000c1a:	f000 f887 	bl	8000d2c <__sinit>
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <_fflush_r+0x6c>)
 8000c20:	429c      	cmp	r4, r3
 8000c22:	d11b      	bne.n	8000c5c <_fflush_r+0x58>
 8000c24:	686c      	ldr	r4, [r5, #4]
 8000c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0ef      	beq.n	8000c0e <_fflush_r+0xa>
 8000c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c30:	07d0      	lsls	r0, r2, #31
 8000c32:	d404      	bmi.n	8000c3e <_fflush_r+0x3a>
 8000c34:	0599      	lsls	r1, r3, #22
 8000c36:	d402      	bmi.n	8000c3e <_fflush_r+0x3a>
 8000c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c3a:	f7ff fe1c 	bl	8000876 <__retarget_lock_acquire_recursive>
 8000c3e:	4628      	mov	r0, r5
 8000c40:	4621      	mov	r1, r4
 8000c42:	f7ff ff59 	bl	8000af8 <__sflush_r>
 8000c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c48:	07da      	lsls	r2, r3, #31
 8000c4a:	4605      	mov	r5, r0
 8000c4c:	d4e0      	bmi.n	8000c10 <_fflush_r+0xc>
 8000c4e:	89a3      	ldrh	r3, [r4, #12]
 8000c50:	059b      	lsls	r3, r3, #22
 8000c52:	d4dd      	bmi.n	8000c10 <_fflush_r+0xc>
 8000c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c56:	f7ff fe0f 	bl	8000878 <__retarget_lock_release_recursive>
 8000c5a:	e7d9      	b.n	8000c10 <_fflush_r+0xc>
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <_fflush_r+0x70>)
 8000c5e:	429c      	cmp	r4, r3
 8000c60:	d101      	bne.n	8000c66 <_fflush_r+0x62>
 8000c62:	68ac      	ldr	r4, [r5, #8]
 8000c64:	e7df      	b.n	8000c26 <_fflush_r+0x22>
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <_fflush_r+0x74>)
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	bf08      	it	eq
 8000c6c:	68ec      	ldreq	r4, [r5, #12]
 8000c6e:	e7da      	b.n	8000c26 <_fflush_r+0x22>
 8000c70:	08001820 	.word	0x08001820
 8000c74:	08001840 	.word	0x08001840
 8000c78:	08001800 	.word	0x08001800

08000c7c <std>:
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	b510      	push	{r4, lr}
 8000c80:	4604      	mov	r4, r0
 8000c82:	e9c0 3300 	strd	r3, r3, [r0]
 8000c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c8a:	6083      	str	r3, [r0, #8]
 8000c8c:	8181      	strh	r1, [r0, #12]
 8000c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8000c90:	81c2      	strh	r2, [r0, #14]
 8000c92:	6183      	str	r3, [r0, #24]
 8000c94:	4619      	mov	r1, r3
 8000c96:	2208      	movs	r2, #8
 8000c98:	305c      	adds	r0, #92	; 0x5c
 8000c9a:	f7ff fdee 	bl	800087a <memset>
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <std+0x38>)
 8000ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <std+0x3c>)
 8000ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <std+0x40>)
 8000ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <std+0x44>)
 8000cac:	6224      	str	r4, [r4, #32]
 8000cae:	6323      	str	r3, [r4, #48]	; 0x30
 8000cb0:	bd10      	pop	{r4, pc}
 8000cb2:	bf00      	nop
 8000cb4:	080010a1 	.word	0x080010a1
 8000cb8:	080010c3 	.word	0x080010c3
 8000cbc:	080010fb 	.word	0x080010fb
 8000cc0:	0800111f 	.word	0x0800111f

08000cc4 <_cleanup_r>:
 8000cc4:	4901      	ldr	r1, [pc, #4]	; (8000ccc <_cleanup_r+0x8>)
 8000cc6:	f000 b8af 	b.w	8000e28 <_fwalk_reent>
 8000cca:	bf00      	nop
 8000ccc:	08000c05 	.word	0x08000c05

08000cd0 <__sfmoreglue>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	1e4a      	subs	r2, r1, #1
 8000cd4:	2568      	movs	r5, #104	; 0x68
 8000cd6:	4355      	muls	r5, r2
 8000cd8:	460e      	mov	r6, r1
 8000cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cde:	f000 f975 	bl	8000fcc <_malloc_r>
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	b140      	cbz	r0, 8000cf8 <__sfmoreglue+0x28>
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8000cec:	300c      	adds	r0, #12
 8000cee:	60a0      	str	r0, [r4, #8]
 8000cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000cf4:	f7ff fdc1 	bl	800087a <memset>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}

08000cfc <__sfp_lock_acquire>:
 8000cfc:	4801      	ldr	r0, [pc, #4]	; (8000d04 <__sfp_lock_acquire+0x8>)
 8000cfe:	f7ff bdba 	b.w	8000876 <__retarget_lock_acquire_recursive>
 8000d02:	bf00      	nop
 8000d04:	2000018c 	.word	0x2000018c

08000d08 <__sfp_lock_release>:
 8000d08:	4801      	ldr	r0, [pc, #4]	; (8000d10 <__sfp_lock_release+0x8>)
 8000d0a:	f7ff bdb5 	b.w	8000878 <__retarget_lock_release_recursive>
 8000d0e:	bf00      	nop
 8000d10:	2000018c 	.word	0x2000018c

08000d14 <__sinit_lock_acquire>:
 8000d14:	4801      	ldr	r0, [pc, #4]	; (8000d1c <__sinit_lock_acquire+0x8>)
 8000d16:	f7ff bdae 	b.w	8000876 <__retarget_lock_acquire_recursive>
 8000d1a:	bf00      	nop
 8000d1c:	20000187 	.word	0x20000187

08000d20 <__sinit_lock_release>:
 8000d20:	4801      	ldr	r0, [pc, #4]	; (8000d28 <__sinit_lock_release+0x8>)
 8000d22:	f7ff bda9 	b.w	8000878 <__retarget_lock_release_recursive>
 8000d26:	bf00      	nop
 8000d28:	20000187 	.word	0x20000187

08000d2c <__sinit>:
 8000d2c:	b510      	push	{r4, lr}
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fff0 	bl	8000d14 <__sinit_lock_acquire>
 8000d34:	69a3      	ldr	r3, [r4, #24]
 8000d36:	b11b      	cbz	r3, 8000d40 <__sinit+0x14>
 8000d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d3c:	f7ff bff0 	b.w	8000d20 <__sinit_lock_release>
 8000d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d44:	6523      	str	r3, [r4, #80]	; 0x50
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <__sinit+0x68>)
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <__sinit+0x6c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	bf04      	itt	eq
 8000d52:	2301      	moveq	r3, #1
 8000d54:	61a3      	streq	r3, [r4, #24]
 8000d56:	4620      	mov	r0, r4
 8000d58:	f000 f820 	bl	8000d9c <__sfp>
 8000d5c:	6060      	str	r0, [r4, #4]
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f000 f81c 	bl	8000d9c <__sfp>
 8000d64:	60a0      	str	r0, [r4, #8]
 8000d66:	4620      	mov	r0, r4
 8000d68:	f000 f818 	bl	8000d9c <__sfp>
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60e0      	str	r0, [r4, #12]
 8000d70:	2104      	movs	r1, #4
 8000d72:	6860      	ldr	r0, [r4, #4]
 8000d74:	f7ff ff82 	bl	8000c7c <std>
 8000d78:	68a0      	ldr	r0, [r4, #8]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2109      	movs	r1, #9
 8000d7e:	f7ff ff7d 	bl	8000c7c <std>
 8000d82:	68e0      	ldr	r0, [r4, #12]
 8000d84:	2202      	movs	r2, #2
 8000d86:	2112      	movs	r1, #18
 8000d88:	f7ff ff78 	bl	8000c7c <std>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61a3      	str	r3, [r4, #24]
 8000d90:	e7d2      	b.n	8000d38 <__sinit+0xc>
 8000d92:	bf00      	nop
 8000d94:	080017fc 	.word	0x080017fc
 8000d98:	08000cc5 	.word	0x08000cc5

08000d9c <__sfp>:
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	4607      	mov	r7, r0
 8000da0:	f7ff ffac 	bl	8000cfc <__sfp_lock_acquire>
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <__sfp+0x84>)
 8000da6:	681e      	ldr	r6, [r3, #0]
 8000da8:	69b3      	ldr	r3, [r6, #24]
 8000daa:	b913      	cbnz	r3, 8000db2 <__sfp+0x16>
 8000dac:	4630      	mov	r0, r6
 8000dae:	f7ff ffbd 	bl	8000d2c <__sinit>
 8000db2:	3648      	adds	r6, #72	; 0x48
 8000db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	d503      	bpl.n	8000dc4 <__sfp+0x28>
 8000dbc:	6833      	ldr	r3, [r6, #0]
 8000dbe:	b30b      	cbz	r3, 8000e04 <__sfp+0x68>
 8000dc0:	6836      	ldr	r6, [r6, #0]
 8000dc2:	e7f7      	b.n	8000db4 <__sfp+0x18>
 8000dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000dc8:	b9d5      	cbnz	r5, 8000e00 <__sfp+0x64>
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <__sfp+0x88>)
 8000dcc:	60e3      	str	r3, [r4, #12]
 8000dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8000dd4:	f7ff fd4e 	bl	8000874 <__retarget_lock_init_recursive>
 8000dd8:	f7ff ff96 	bl	8000d08 <__sfp_lock_release>
 8000ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000de4:	6025      	str	r5, [r4, #0]
 8000de6:	61a5      	str	r5, [r4, #24]
 8000de8:	2208      	movs	r2, #8
 8000dea:	4629      	mov	r1, r5
 8000dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000df0:	f7ff fd43 	bl	800087a <memset>
 8000df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e00:	3468      	adds	r4, #104	; 0x68
 8000e02:	e7d9      	b.n	8000db8 <__sfp+0x1c>
 8000e04:	2104      	movs	r1, #4
 8000e06:	4638      	mov	r0, r7
 8000e08:	f7ff ff62 	bl	8000cd0 <__sfmoreglue>
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	6030      	str	r0, [r6, #0]
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d1d5      	bne.n	8000dc0 <__sfp+0x24>
 8000e14:	f7ff ff78 	bl	8000d08 <__sfp_lock_release>
 8000e18:	230c      	movs	r3, #12
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	e7ee      	b.n	8000dfc <__sfp+0x60>
 8000e1e:	bf00      	nop
 8000e20:	080017fc 	.word	0x080017fc
 8000e24:	ffff0001 	.word	0xffff0001

08000e28 <_fwalk_reent>:
 8000e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4688      	mov	r8, r1
 8000e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e34:	2700      	movs	r7, #0
 8000e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8000e3e:	d505      	bpl.n	8000e4c <_fwalk_reent+0x24>
 8000e40:	6824      	ldr	r4, [r4, #0]
 8000e42:	2c00      	cmp	r4, #0
 8000e44:	d1f7      	bne.n	8000e36 <_fwalk_reent+0xe>
 8000e46:	4638      	mov	r0, r7
 8000e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e4c:	89ab      	ldrh	r3, [r5, #12]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d907      	bls.n	8000e62 <_fwalk_reent+0x3a>
 8000e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e56:	3301      	adds	r3, #1
 8000e58:	d003      	beq.n	8000e62 <_fwalk_reent+0x3a>
 8000e5a:	4629      	mov	r1, r5
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	47c0      	blx	r8
 8000e60:	4307      	orrs	r7, r0
 8000e62:	3568      	adds	r5, #104	; 0x68
 8000e64:	e7e9      	b.n	8000e3a <_fwalk_reent+0x12>

08000e66 <__swhatbuf_r>:
 8000e66:	b570      	push	{r4, r5, r6, lr}
 8000e68:	460e      	mov	r6, r1
 8000e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e6e:	2900      	cmp	r1, #0
 8000e70:	b096      	sub	sp, #88	; 0x58
 8000e72:	4614      	mov	r4, r2
 8000e74:	461d      	mov	r5, r3
 8000e76:	da07      	bge.n	8000e88 <__swhatbuf_r+0x22>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	602b      	str	r3, [r5, #0]
 8000e7c:	89b3      	ldrh	r3, [r6, #12]
 8000e7e:	061a      	lsls	r2, r3, #24
 8000e80:	d410      	bmi.n	8000ea4 <__swhatbuf_r+0x3e>
 8000e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e86:	e00e      	b.n	8000ea6 <__swhatbuf_r+0x40>
 8000e88:	466a      	mov	r2, sp
 8000e8a:	f000 f96f 	bl	800116c <_fstat_r>
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	dbf2      	blt.n	8000e78 <__swhatbuf_r+0x12>
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e9c:	425a      	negs	r2, r3
 8000e9e:	415a      	adcs	r2, r3
 8000ea0:	602a      	str	r2, [r5, #0]
 8000ea2:	e7ee      	b.n	8000e82 <__swhatbuf_r+0x1c>
 8000ea4:	2340      	movs	r3, #64	; 0x40
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	6023      	str	r3, [r4, #0]
 8000eaa:	b016      	add	sp, #88	; 0x58
 8000eac:	bd70      	pop	{r4, r5, r6, pc}
	...

08000eb0 <__smakebuf_r>:
 8000eb0:	898b      	ldrh	r3, [r1, #12]
 8000eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000eb4:	079d      	lsls	r5, r3, #30
 8000eb6:	4606      	mov	r6, r0
 8000eb8:	460c      	mov	r4, r1
 8000eba:	d507      	bpl.n	8000ecc <__smakebuf_r+0x1c>
 8000ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ec0:	6023      	str	r3, [r4, #0]
 8000ec2:	6123      	str	r3, [r4, #16]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	6163      	str	r3, [r4, #20]
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	ab01      	add	r3, sp, #4
 8000ece:	466a      	mov	r2, sp
 8000ed0:	f7ff ffc9 	bl	8000e66 <__swhatbuf_r>
 8000ed4:	9900      	ldr	r1, [sp, #0]
 8000ed6:	4605      	mov	r5, r0
 8000ed8:	4630      	mov	r0, r6
 8000eda:	f000 f877 	bl	8000fcc <_malloc_r>
 8000ede:	b948      	cbnz	r0, 8000ef4 <__smakebuf_r+0x44>
 8000ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ee4:	059a      	lsls	r2, r3, #22
 8000ee6:	d4ef      	bmi.n	8000ec8 <__smakebuf_r+0x18>
 8000ee8:	f023 0303 	bic.w	r3, r3, #3
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	81a3      	strh	r3, [r4, #12]
 8000ef2:	e7e3      	b.n	8000ebc <__smakebuf_r+0xc>
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <__smakebuf_r+0x7c>)
 8000ef6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ef8:	89a3      	ldrh	r3, [r4, #12]
 8000efa:	6020      	str	r0, [r4, #0]
 8000efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f00:	81a3      	strh	r3, [r4, #12]
 8000f02:	9b00      	ldr	r3, [sp, #0]
 8000f04:	6163      	str	r3, [r4, #20]
 8000f06:	9b01      	ldr	r3, [sp, #4]
 8000f08:	6120      	str	r0, [r4, #16]
 8000f0a:	b15b      	cbz	r3, 8000f24 <__smakebuf_r+0x74>
 8000f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f10:	4630      	mov	r0, r6
 8000f12:	f000 f93d 	bl	8001190 <_isatty_r>
 8000f16:	b128      	cbz	r0, 8000f24 <__smakebuf_r+0x74>
 8000f18:	89a3      	ldrh	r3, [r4, #12]
 8000f1a:	f023 0303 	bic.w	r3, r3, #3
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	81a3      	strh	r3, [r4, #12]
 8000f24:	89a0      	ldrh	r0, [r4, #12]
 8000f26:	4305      	orrs	r5, r0
 8000f28:	81a5      	strh	r5, [r4, #12]
 8000f2a:	e7cd      	b.n	8000ec8 <__smakebuf_r+0x18>
 8000f2c:	08000cc5 	.word	0x08000cc5

08000f30 <_free_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4605      	mov	r5, r0
 8000f34:	2900      	cmp	r1, #0
 8000f36:	d045      	beq.n	8000fc4 <_free_r+0x94>
 8000f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f3c:	1f0c      	subs	r4, r1, #4
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bfb8      	it	lt
 8000f42:	18e4      	addlt	r4, r4, r3
 8000f44:	f000 f946 	bl	80011d4 <__malloc_lock>
 8000f48:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <_free_r+0x98>)
 8000f4a:	6813      	ldr	r3, [r2, #0]
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	b933      	cbnz	r3, 8000f5e <_free_r+0x2e>
 8000f50:	6063      	str	r3, [r4, #4]
 8000f52:	6014      	str	r4, [r2, #0]
 8000f54:	4628      	mov	r0, r5
 8000f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f5a:	f000 b941 	b.w	80011e0 <__malloc_unlock>
 8000f5e:	42a3      	cmp	r3, r4
 8000f60:	d90b      	bls.n	8000f7a <_free_r+0x4a>
 8000f62:	6821      	ldr	r1, [r4, #0]
 8000f64:	1862      	adds	r2, r4, r1
 8000f66:	4293      	cmp	r3, r2
 8000f68:	bf04      	itt	eq
 8000f6a:	681a      	ldreq	r2, [r3, #0]
 8000f6c:	685b      	ldreq	r3, [r3, #4]
 8000f6e:	6063      	str	r3, [r4, #4]
 8000f70:	bf04      	itt	eq
 8000f72:	1852      	addeq	r2, r2, r1
 8000f74:	6022      	streq	r2, [r4, #0]
 8000f76:	6004      	str	r4, [r0, #0]
 8000f78:	e7ec      	b.n	8000f54 <_free_r+0x24>
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	b10b      	cbz	r3, 8000f84 <_free_r+0x54>
 8000f80:	42a3      	cmp	r3, r4
 8000f82:	d9fa      	bls.n	8000f7a <_free_r+0x4a>
 8000f84:	6811      	ldr	r1, [r2, #0]
 8000f86:	1850      	adds	r0, r2, r1
 8000f88:	42a0      	cmp	r0, r4
 8000f8a:	d10b      	bne.n	8000fa4 <_free_r+0x74>
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	4401      	add	r1, r0
 8000f90:	1850      	adds	r0, r2, r1
 8000f92:	4283      	cmp	r3, r0
 8000f94:	6011      	str	r1, [r2, #0]
 8000f96:	d1dd      	bne.n	8000f54 <_free_r+0x24>
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	6053      	str	r3, [r2, #4]
 8000f9e:	4401      	add	r1, r0
 8000fa0:	6011      	str	r1, [r2, #0]
 8000fa2:	e7d7      	b.n	8000f54 <_free_r+0x24>
 8000fa4:	d902      	bls.n	8000fac <_free_r+0x7c>
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	602b      	str	r3, [r5, #0]
 8000faa:	e7d3      	b.n	8000f54 <_free_r+0x24>
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	1821      	adds	r1, r4, r0
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	bf04      	itt	eq
 8000fb4:	6819      	ldreq	r1, [r3, #0]
 8000fb6:	685b      	ldreq	r3, [r3, #4]
 8000fb8:	6063      	str	r3, [r4, #4]
 8000fba:	bf04      	itt	eq
 8000fbc:	1809      	addeq	r1, r1, r0
 8000fbe:	6021      	streq	r1, [r4, #0]
 8000fc0:	6054      	str	r4, [r2, #4]
 8000fc2:	e7c7      	b.n	8000f54 <_free_r+0x24>
 8000fc4:	bd38      	pop	{r3, r4, r5, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000090 	.word	0x20000090

08000fcc <_malloc_r>:
 8000fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fce:	1ccd      	adds	r5, r1, #3
 8000fd0:	f025 0503 	bic.w	r5, r5, #3
 8000fd4:	3508      	adds	r5, #8
 8000fd6:	2d0c      	cmp	r5, #12
 8000fd8:	bf38      	it	cc
 8000fda:	250c      	movcc	r5, #12
 8000fdc:	2d00      	cmp	r5, #0
 8000fde:	4606      	mov	r6, r0
 8000fe0:	db01      	blt.n	8000fe6 <_malloc_r+0x1a>
 8000fe2:	42a9      	cmp	r1, r5
 8000fe4:	d903      	bls.n	8000fee <_malloc_r+0x22>
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	6033      	str	r3, [r6, #0]
 8000fea:	2000      	movs	r0, #0
 8000fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fee:	f000 f8f1 	bl	80011d4 <__malloc_lock>
 8000ff2:	4921      	ldr	r1, [pc, #132]	; (8001078 <_malloc_r+0xac>)
 8000ff4:	680a      	ldr	r2, [r1, #0]
 8000ff6:	4614      	mov	r4, r2
 8000ff8:	b99c      	cbnz	r4, 8001022 <_malloc_r+0x56>
 8000ffa:	4f20      	ldr	r7, [pc, #128]	; (800107c <_malloc_r+0xb0>)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b923      	cbnz	r3, 800100a <_malloc_r+0x3e>
 8001000:	4621      	mov	r1, r4
 8001002:	4630      	mov	r0, r6
 8001004:	f000 f83c 	bl	8001080 <_sbrk_r>
 8001008:	6038      	str	r0, [r7, #0]
 800100a:	4629      	mov	r1, r5
 800100c:	4630      	mov	r0, r6
 800100e:	f000 f837 	bl	8001080 <_sbrk_r>
 8001012:	1c43      	adds	r3, r0, #1
 8001014:	d123      	bne.n	800105e <_malloc_r+0x92>
 8001016:	230c      	movs	r3, #12
 8001018:	6033      	str	r3, [r6, #0]
 800101a:	4630      	mov	r0, r6
 800101c:	f000 f8e0 	bl	80011e0 <__malloc_unlock>
 8001020:	e7e3      	b.n	8000fea <_malloc_r+0x1e>
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	1b5b      	subs	r3, r3, r5
 8001026:	d417      	bmi.n	8001058 <_malloc_r+0x8c>
 8001028:	2b0b      	cmp	r3, #11
 800102a:	d903      	bls.n	8001034 <_malloc_r+0x68>
 800102c:	6023      	str	r3, [r4, #0]
 800102e:	441c      	add	r4, r3
 8001030:	6025      	str	r5, [r4, #0]
 8001032:	e004      	b.n	800103e <_malloc_r+0x72>
 8001034:	6863      	ldr	r3, [r4, #4]
 8001036:	42a2      	cmp	r2, r4
 8001038:	bf0c      	ite	eq
 800103a:	600b      	streq	r3, [r1, #0]
 800103c:	6053      	strne	r3, [r2, #4]
 800103e:	4630      	mov	r0, r6
 8001040:	f000 f8ce 	bl	80011e0 <__malloc_unlock>
 8001044:	f104 000b 	add.w	r0, r4, #11
 8001048:	1d23      	adds	r3, r4, #4
 800104a:	f020 0007 	bic.w	r0, r0, #7
 800104e:	1ac2      	subs	r2, r0, r3
 8001050:	d0cc      	beq.n	8000fec <_malloc_r+0x20>
 8001052:	1a1b      	subs	r3, r3, r0
 8001054:	50a3      	str	r3, [r4, r2]
 8001056:	e7c9      	b.n	8000fec <_malloc_r+0x20>
 8001058:	4622      	mov	r2, r4
 800105a:	6864      	ldr	r4, [r4, #4]
 800105c:	e7cc      	b.n	8000ff8 <_malloc_r+0x2c>
 800105e:	1cc4      	adds	r4, r0, #3
 8001060:	f024 0403 	bic.w	r4, r4, #3
 8001064:	42a0      	cmp	r0, r4
 8001066:	d0e3      	beq.n	8001030 <_malloc_r+0x64>
 8001068:	1a21      	subs	r1, r4, r0
 800106a:	4630      	mov	r0, r6
 800106c:	f000 f808 	bl	8001080 <_sbrk_r>
 8001070:	3001      	adds	r0, #1
 8001072:	d1dd      	bne.n	8001030 <_malloc_r+0x64>
 8001074:	e7cf      	b.n	8001016 <_malloc_r+0x4a>
 8001076:	bf00      	nop
 8001078:	20000090 	.word	0x20000090
 800107c:	20000094 	.word	0x20000094

08001080 <_sbrk_r>:
 8001080:	b538      	push	{r3, r4, r5, lr}
 8001082:	4d06      	ldr	r5, [pc, #24]	; (800109c <_sbrk_r+0x1c>)
 8001084:	2300      	movs	r3, #0
 8001086:	4604      	mov	r4, r0
 8001088:	4608      	mov	r0, r1
 800108a:	602b      	str	r3, [r5, #0]
 800108c:	f7ff fafa 	bl	8000684 <_sbrk>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	d102      	bne.n	800109a <_sbrk_r+0x1a>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b103      	cbz	r3, 800109a <_sbrk_r+0x1a>
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	20000190 	.word	0x20000190

080010a0 <__sread>:
 80010a0:	b510      	push	{r4, lr}
 80010a2:	460c      	mov	r4, r1
 80010a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010a8:	f000 f8a0 	bl	80011ec <_read_r>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	bfab      	itete	ge
 80010b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010b2:	89a3      	ldrhlt	r3, [r4, #12]
 80010b4:	181b      	addge	r3, r3, r0
 80010b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010ba:	bfac      	ite	ge
 80010bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80010be:	81a3      	strhlt	r3, [r4, #12]
 80010c0:	bd10      	pop	{r4, pc}

080010c2 <__swrite>:
 80010c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c6:	461f      	mov	r7, r3
 80010c8:	898b      	ldrh	r3, [r1, #12]
 80010ca:	05db      	lsls	r3, r3, #23
 80010cc:	4605      	mov	r5, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4616      	mov	r6, r2
 80010d2:	d505      	bpl.n	80010e0 <__swrite+0x1e>
 80010d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d8:	2302      	movs	r3, #2
 80010da:	2200      	movs	r2, #0
 80010dc:	f000 f868 	bl	80011b0 <_lseek_r>
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010ea:	81a3      	strh	r3, [r4, #12]
 80010ec:	4632      	mov	r2, r6
 80010ee:	463b      	mov	r3, r7
 80010f0:	4628      	mov	r0, r5
 80010f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010f6:	f000 b817 	b.w	8001128 <_write_r>

080010fa <__sseek>:
 80010fa:	b510      	push	{r4, lr}
 80010fc:	460c      	mov	r4, r1
 80010fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001102:	f000 f855 	bl	80011b0 <_lseek_r>
 8001106:	1c43      	adds	r3, r0, #1
 8001108:	89a3      	ldrh	r3, [r4, #12]
 800110a:	bf15      	itete	ne
 800110c:	6560      	strne	r0, [r4, #84]	; 0x54
 800110e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001116:	81a3      	strheq	r3, [r4, #12]
 8001118:	bf18      	it	ne
 800111a:	81a3      	strhne	r3, [r4, #12]
 800111c:	bd10      	pop	{r4, pc}

0800111e <__sclose>:
 800111e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001122:	f000 b813 	b.w	800114c <_close_r>
	...

08001128 <_write_r>:
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	4d07      	ldr	r5, [pc, #28]	; (8001148 <_write_r+0x20>)
 800112c:	4604      	mov	r4, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4611      	mov	r1, r2
 8001132:	2200      	movs	r2, #0
 8001134:	602a      	str	r2, [r5, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	f000 f91a 	bl	8001370 <_write>
 800113c:	1c43      	adds	r3, r0, #1
 800113e:	d102      	bne.n	8001146 <_write_r+0x1e>
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	b103      	cbz	r3, 8001146 <_write_r+0x1e>
 8001144:	6023      	str	r3, [r4, #0]
 8001146:	bd38      	pop	{r3, r4, r5, pc}
 8001148:	20000190 	.word	0x20000190

0800114c <_close_r>:
 800114c:	b538      	push	{r3, r4, r5, lr}
 800114e:	4d06      	ldr	r5, [pc, #24]	; (8001168 <_close_r+0x1c>)
 8001150:	2300      	movs	r3, #0
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	602b      	str	r3, [r5, #0]
 8001158:	f000 f938 	bl	80013cc <_close>
 800115c:	1c43      	adds	r3, r0, #1
 800115e:	d102      	bne.n	8001166 <_close_r+0x1a>
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	b103      	cbz	r3, 8001166 <_close_r+0x1a>
 8001164:	6023      	str	r3, [r4, #0]
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	20000190 	.word	0x20000190

0800116c <_fstat_r>:
 800116c:	b538      	push	{r3, r4, r5, lr}
 800116e:	4d07      	ldr	r5, [pc, #28]	; (800118c <_fstat_r+0x20>)
 8001170:	2300      	movs	r3, #0
 8001172:	4604      	mov	r4, r0
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	602b      	str	r3, [r5, #0]
 800117a:	f000 f96e 	bl	800145a <_fstat>
 800117e:	1c43      	adds	r3, r0, #1
 8001180:	d102      	bne.n	8001188 <_fstat_r+0x1c>
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	b103      	cbz	r3, 8001188 <_fstat_r+0x1c>
 8001186:	6023      	str	r3, [r4, #0]
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop
 800118c:	20000190 	.word	0x20000190

08001190 <_isatty_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	4d06      	ldr	r5, [pc, #24]	; (80011ac <_isatty_r+0x1c>)
 8001194:	2300      	movs	r3, #0
 8001196:	4604      	mov	r4, r0
 8001198:	4608      	mov	r0, r1
 800119a:	602b      	str	r3, [r5, #0]
 800119c:	f000 fac2 	bl	8001724 <_isatty>
 80011a0:	1c43      	adds	r3, r0, #1
 80011a2:	d102      	bne.n	80011aa <_isatty_r+0x1a>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	b103      	cbz	r3, 80011aa <_isatty_r+0x1a>
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	20000190 	.word	0x20000190

080011b0 <_lseek_r>:
 80011b0:	b538      	push	{r3, r4, r5, lr}
 80011b2:	4d07      	ldr	r5, [pc, #28]	; (80011d0 <_lseek_r+0x20>)
 80011b4:	4604      	mov	r4, r0
 80011b6:	4608      	mov	r0, r1
 80011b8:	4611      	mov	r1, r2
 80011ba:	2200      	movs	r2, #0
 80011bc:	602a      	str	r2, [r5, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	f000 f8c4 	bl	800134c <_lseek>
 80011c4:	1c43      	adds	r3, r0, #1
 80011c6:	d102      	bne.n	80011ce <_lseek_r+0x1e>
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	b103      	cbz	r3, 80011ce <_lseek_r+0x1e>
 80011cc:	6023      	str	r3, [r4, #0]
 80011ce:	bd38      	pop	{r3, r4, r5, pc}
 80011d0:	20000190 	.word	0x20000190

080011d4 <__malloc_lock>:
 80011d4:	4801      	ldr	r0, [pc, #4]	; (80011dc <__malloc_lock+0x8>)
 80011d6:	f7ff bb4e 	b.w	8000876 <__retarget_lock_acquire_recursive>
 80011da:	bf00      	nop
 80011dc:	20000188 	.word	0x20000188

080011e0 <__malloc_unlock>:
 80011e0:	4801      	ldr	r0, [pc, #4]	; (80011e8 <__malloc_unlock+0x8>)
 80011e2:	f7ff bb49 	b.w	8000878 <__retarget_lock_release_recursive>
 80011e6:	bf00      	nop
 80011e8:	20000188 	.word	0x20000188

080011ec <_read_r>:
 80011ec:	b538      	push	{r3, r4, r5, lr}
 80011ee:	4d07      	ldr	r5, [pc, #28]	; (800120c <_read_r+0x20>)
 80011f0:	4604      	mov	r4, r0
 80011f2:	4608      	mov	r0, r1
 80011f4:	4611      	mov	r1, r2
 80011f6:	2200      	movs	r2, #0
 80011f8:	602a      	str	r2, [r5, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	f000 f850 	bl	80012a0 <_read>
 8001200:	1c43      	adds	r3, r0, #1
 8001202:	d102      	bne.n	800120a <_read_r+0x1e>
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	b103      	cbz	r3, 800120a <_read_r+0x1e>
 8001208:	6023      	str	r3, [r4, #0]
 800120a:	bd38      	pop	{r3, r4, r5, pc}
 800120c:	20000190 	.word	0x20000190

08001210 <findslot>:
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <findslot+0x2c>)
 8001212:	b510      	push	{r4, lr}
 8001214:	4604      	mov	r4, r0
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	b118      	cbz	r0, 8001222 <findslot+0x12>
 800121a:	6983      	ldr	r3, [r0, #24]
 800121c:	b90b      	cbnz	r3, 8001222 <findslot+0x12>
 800121e:	f7ff fd85 	bl	8000d2c <__sinit>
 8001222:	2c13      	cmp	r4, #19
 8001224:	d807      	bhi.n	8001236 <findslot+0x26>
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <findslot+0x30>)
 8001228:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800122c:	3201      	adds	r2, #1
 800122e:	d002      	beq.n	8001236 <findslot+0x26>
 8001230:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001234:	bd10      	pop	{r4, pc}
 8001236:	2000      	movs	r0, #0
 8001238:	e7fc      	b.n	8001234 <findslot+0x24>
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000
 8001240:	200000a4 	.word	0x200000a4

08001244 <checkerror>:
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	1c43      	adds	r3, r0, #1
 8001248:	4604      	mov	r4, r0
 800124a:	d109      	bne.n	8001260 <checkerror+0x1c>
 800124c:	f7ff fa7a 	bl	8000744 <__errno>
 8001250:	2613      	movs	r6, #19
 8001252:	4605      	mov	r5, r0
 8001254:	2700      	movs	r7, #0
 8001256:	4630      	mov	r0, r6
 8001258:	4639      	mov	r1, r7
 800125a:	beab      	bkpt	0x00ab
 800125c:	4606      	mov	r6, r0
 800125e:	602e      	str	r6, [r5, #0]
 8001260:	4620      	mov	r0, r4
 8001262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001264 <error>:
 8001264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001266:	4604      	mov	r4, r0
 8001268:	f7ff fa6c 	bl	8000744 <__errno>
 800126c:	2613      	movs	r6, #19
 800126e:	4605      	mov	r5, r0
 8001270:	2700      	movs	r7, #0
 8001272:	4630      	mov	r0, r6
 8001274:	4639      	mov	r1, r7
 8001276:	beab      	bkpt	0x00ab
 8001278:	4606      	mov	r6, r0
 800127a:	602e      	str	r6, [r5, #0]
 800127c:	4620      	mov	r0, r4
 800127e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001280 <_swiread>:
 8001280:	b530      	push	{r4, r5, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001288:	9203      	str	r2, [sp, #12]
 800128a:	2406      	movs	r4, #6
 800128c:	ad01      	add	r5, sp, #4
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	beab      	bkpt	0x00ab
 8001294:	4604      	mov	r4, r0
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff ffd4 	bl	8001244 <checkerror>
 800129c:	b005      	add	sp, #20
 800129e:	bd30      	pop	{r4, r5, pc}

080012a0 <_read>:
 80012a0:	b570      	push	{r4, r5, r6, lr}
 80012a2:	460e      	mov	r6, r1
 80012a4:	4615      	mov	r5, r2
 80012a6:	f7ff ffb3 	bl	8001210 <findslot>
 80012aa:	4604      	mov	r4, r0
 80012ac:	b930      	cbnz	r0, 80012bc <_read+0x1c>
 80012ae:	f7ff fa49 	bl	8000744 <__errno>
 80012b2:	2309      	movs	r3, #9
 80012b4:	6003      	str	r3, [r0, #0]
 80012b6:	f04f 30ff 	mov.w	r0, #4294967295
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
 80012bc:	6800      	ldr	r0, [r0, #0]
 80012be:	462a      	mov	r2, r5
 80012c0:	4631      	mov	r1, r6
 80012c2:	f7ff ffdd 	bl	8001280 <_swiread>
 80012c6:	1c43      	adds	r3, r0, #1
 80012c8:	bf1f      	itttt	ne
 80012ca:	6863      	ldrne	r3, [r4, #4]
 80012cc:	1a28      	subne	r0, r5, r0
 80012ce:	181b      	addne	r3, r3, r0
 80012d0:	6063      	strne	r3, [r4, #4]
 80012d2:	e7f2      	b.n	80012ba <_read+0x1a>

080012d4 <_swilseek>:
 80012d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012d6:	460c      	mov	r4, r1
 80012d8:	4616      	mov	r6, r2
 80012da:	f7ff ff99 	bl	8001210 <findslot>
 80012de:	4605      	mov	r5, r0
 80012e0:	b940      	cbnz	r0, 80012f4 <_swilseek+0x20>
 80012e2:	f7ff fa2f 	bl	8000744 <__errno>
 80012e6:	2309      	movs	r3, #9
 80012e8:	6003      	str	r3, [r0, #0]
 80012ea:	f04f 34ff 	mov.w	r4, #4294967295
 80012ee:	4620      	mov	r0, r4
 80012f0:	b003      	add	sp, #12
 80012f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f4:	2e02      	cmp	r6, #2
 80012f6:	d903      	bls.n	8001300 <_swilseek+0x2c>
 80012f8:	f7ff fa24 	bl	8000744 <__errno>
 80012fc:	2316      	movs	r3, #22
 80012fe:	e7f3      	b.n	80012e8 <_swilseek+0x14>
 8001300:	2e01      	cmp	r6, #1
 8001302:	d112      	bne.n	800132a <_swilseek+0x56>
 8001304:	6843      	ldr	r3, [r0, #4]
 8001306:	18e4      	adds	r4, r4, r3
 8001308:	d4f6      	bmi.n	80012f8 <_swilseek+0x24>
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	260a      	movs	r6, #10
 800130e:	e9cd 3400 	strd	r3, r4, [sp]
 8001312:	466f      	mov	r7, sp
 8001314:	4630      	mov	r0, r6
 8001316:	4639      	mov	r1, r7
 8001318:	beab      	bkpt	0x00ab
 800131a:	4606      	mov	r6, r0
 800131c:	4630      	mov	r0, r6
 800131e:	f7ff ff91 	bl	8001244 <checkerror>
 8001322:	2800      	cmp	r0, #0
 8001324:	dbe1      	blt.n	80012ea <_swilseek+0x16>
 8001326:	606c      	str	r4, [r5, #4]
 8001328:	e7e1      	b.n	80012ee <_swilseek+0x1a>
 800132a:	2e02      	cmp	r6, #2
 800132c:	d1ed      	bne.n	800130a <_swilseek+0x36>
 800132e:	6803      	ldr	r3, [r0, #0]
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	260c      	movs	r6, #12
 8001334:	466f      	mov	r7, sp
 8001336:	4630      	mov	r0, r6
 8001338:	4639      	mov	r1, r7
 800133a:	beab      	bkpt	0x00ab
 800133c:	4606      	mov	r6, r0
 800133e:	4630      	mov	r0, r6
 8001340:	f7ff ff80 	bl	8001244 <checkerror>
 8001344:	1c43      	adds	r3, r0, #1
 8001346:	d0d0      	beq.n	80012ea <_swilseek+0x16>
 8001348:	4404      	add	r4, r0
 800134a:	e7de      	b.n	800130a <_swilseek+0x36>

0800134c <_lseek>:
 800134c:	f7ff bfc2 	b.w	80012d4 <_swilseek>

08001350 <_swiwrite>:
 8001350:	b530      	push	{r4, r5, lr}
 8001352:	b085      	sub	sp, #20
 8001354:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001358:	9203      	str	r2, [sp, #12]
 800135a:	2405      	movs	r4, #5
 800135c:	ad01      	add	r5, sp, #4
 800135e:	4620      	mov	r0, r4
 8001360:	4629      	mov	r1, r5
 8001362:	beab      	bkpt	0x00ab
 8001364:	4604      	mov	r4, r0
 8001366:	4620      	mov	r0, r4
 8001368:	f7ff ff6c 	bl	8001244 <checkerror>
 800136c:	b005      	add	sp, #20
 800136e:	bd30      	pop	{r4, r5, pc}

08001370 <_write>:
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	460e      	mov	r6, r1
 8001374:	4615      	mov	r5, r2
 8001376:	f7ff ff4b 	bl	8001210 <findslot>
 800137a:	4604      	mov	r4, r0
 800137c:	b930      	cbnz	r0, 800138c <_write+0x1c>
 800137e:	f7ff f9e1 	bl	8000744 <__errno>
 8001382:	2309      	movs	r3, #9
 8001384:	6003      	str	r3, [r0, #0]
 8001386:	f04f 30ff 	mov.w	r0, #4294967295
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	6800      	ldr	r0, [r0, #0]
 800138e:	462a      	mov	r2, r5
 8001390:	4631      	mov	r1, r6
 8001392:	f7ff ffdd 	bl	8001350 <_swiwrite>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	dbf5      	blt.n	8001386 <_write+0x16>
 800139a:	6862      	ldr	r2, [r4, #4]
 800139c:	1ae8      	subs	r0, r5, r3
 800139e:	4402      	add	r2, r0
 80013a0:	42ab      	cmp	r3, r5
 80013a2:	6062      	str	r2, [r4, #4]
 80013a4:	d1f1      	bne.n	800138a <_write+0x1a>
 80013a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff bf5a 	b.w	8001264 <error>

080013b0 <_swiclose>:
 80013b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013b2:	2402      	movs	r4, #2
 80013b4:	9001      	str	r0, [sp, #4]
 80013b6:	ad01      	add	r5, sp, #4
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	beab      	bkpt	0x00ab
 80013be:	4604      	mov	r4, r0
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff ff3f 	bl	8001244 <checkerror>
 80013c6:	b003      	add	sp, #12
 80013c8:	bd30      	pop	{r4, r5, pc}
	...

080013cc <_close>:
 80013cc:	b538      	push	{r3, r4, r5, lr}
 80013ce:	4605      	mov	r5, r0
 80013d0:	f7ff ff1e 	bl	8001210 <findslot>
 80013d4:	4604      	mov	r4, r0
 80013d6:	b930      	cbnz	r0, 80013e6 <_close+0x1a>
 80013d8:	f7ff f9b4 	bl	8000744 <__errno>
 80013dc:	2309      	movs	r3, #9
 80013de:	6003      	str	r3, [r0, #0]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	bd38      	pop	{r3, r4, r5, pc}
 80013e6:	3d01      	subs	r5, #1
 80013e8:	2d01      	cmp	r5, #1
 80013ea:	d809      	bhi.n	8001400 <_close+0x34>
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <_close+0x48>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d104      	bne.n	8001400 <_close+0x34>
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	6003      	str	r3, [r0, #0]
 80013fc:	2000      	movs	r0, #0
 80013fe:	e7f1      	b.n	80013e4 <_close+0x18>
 8001400:	6820      	ldr	r0, [r4, #0]
 8001402:	f7ff ffd5 	bl	80013b0 <_swiclose>
 8001406:	2800      	cmp	r0, #0
 8001408:	d1ec      	bne.n	80013e4 <_close+0x18>
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	6023      	str	r3, [r4, #0]
 8001410:	e7e8      	b.n	80013e4 <_close+0x18>
 8001412:	bf00      	nop
 8001414:	200000a4 	.word	0x200000a4

08001418 <_swistat>:
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	460c      	mov	r4, r1
 800141c:	f7ff fef8 	bl	8001210 <findslot>
 8001420:	4605      	mov	r5, r0
 8001422:	b930      	cbnz	r0, 8001432 <_swistat+0x1a>
 8001424:	f7ff f98e 	bl	8000744 <__errno>
 8001428:	2309      	movs	r3, #9
 800142a:	6003      	str	r3, [r0, #0]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	bd70      	pop	{r4, r5, r6, pc}
 8001432:	6863      	ldr	r3, [r4, #4]
 8001434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001438:	6063      	str	r3, [r4, #4]
 800143a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143e:	64a3      	str	r3, [r4, #72]	; 0x48
 8001440:	260c      	movs	r6, #12
 8001442:	4630      	mov	r0, r6
 8001444:	4629      	mov	r1, r5
 8001446:	beab      	bkpt	0x00ab
 8001448:	4605      	mov	r5, r0
 800144a:	4628      	mov	r0, r5
 800144c:	f7ff fefa 	bl	8001244 <checkerror>
 8001450:	1c43      	adds	r3, r0, #1
 8001452:	bf1c      	itt	ne
 8001454:	6120      	strne	r0, [r4, #16]
 8001456:	2000      	movne	r0, #0
 8001458:	e7ea      	b.n	8001430 <_swistat+0x18>

0800145a <_fstat>:
 800145a:	460b      	mov	r3, r1
 800145c:	b510      	push	{r4, lr}
 800145e:	2100      	movs	r1, #0
 8001460:	4604      	mov	r4, r0
 8001462:	2258      	movs	r2, #88	; 0x58
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fa08 	bl	800087a <memset>
 800146a:	4601      	mov	r1, r0
 800146c:	4620      	mov	r0, r4
 800146e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001472:	f7ff bfd1 	b.w	8001418 <_swistat>

08001476 <_stat>:
 8001476:	b538      	push	{r3, r4, r5, lr}
 8001478:	460d      	mov	r5, r1
 800147a:	4604      	mov	r4, r0
 800147c:	2258      	movs	r2, #88	; 0x58
 800147e:	2100      	movs	r1, #0
 8001480:	4628      	mov	r0, r5
 8001482:	f7ff f9fa 	bl	800087a <memset>
 8001486:	4620      	mov	r0, r4
 8001488:	2100      	movs	r1, #0
 800148a:	f000 f811 	bl	80014b0 <_swiopen>
 800148e:	1c43      	adds	r3, r0, #1
 8001490:	4604      	mov	r4, r0
 8001492:	d00b      	beq.n	80014ac <_stat+0x36>
 8001494:	686b      	ldr	r3, [r5, #4]
 8001496:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800149a:	606b      	str	r3, [r5, #4]
 800149c:	4629      	mov	r1, r5
 800149e:	f7ff ffbb 	bl	8001418 <_swistat>
 80014a2:	4605      	mov	r5, r0
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7ff ff91 	bl	80013cc <_close>
 80014aa:	462c      	mov	r4, r5
 80014ac:	4620      	mov	r0, r4
 80014ae:	bd38      	pop	{r3, r4, r5, pc}

080014b0 <_swiopen>:
 80014b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <_swiopen+0xb0>)
 80014b6:	b097      	sub	sp, #92	; 0x5c
 80014b8:	4681      	mov	r9, r0
 80014ba:	460f      	mov	r7, r1
 80014bc:	2500      	movs	r5, #0
 80014be:	461e      	mov	r6, r3
 80014c0:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80014c4:	1c61      	adds	r1, r4, #1
 80014c6:	d037      	beq.n	8001538 <_swiopen+0x88>
 80014c8:	3501      	adds	r5, #1
 80014ca:	2d14      	cmp	r5, #20
 80014cc:	d1f8      	bne.n	80014c0 <_swiopen+0x10>
 80014ce:	f7ff f939 	bl	8000744 <__errno>
 80014d2:	2318      	movs	r3, #24
 80014d4:	6003      	str	r3, [r0, #0]
 80014d6:	f04f 34ff 	mov.w	r4, #4294967295
 80014da:	e03d      	b.n	8001558 <_swiopen+0xa8>
 80014dc:	f3c7 4400 	ubfx	r4, r7, #16, #1
 80014e0:	f240 6301 	movw	r3, #1537	; 0x601
 80014e4:	07ba      	lsls	r2, r7, #30
 80014e6:	bf48      	it	mi
 80014e8:	f044 0402 	orrmi.w	r4, r4, #2
 80014ec:	421f      	tst	r7, r3
 80014ee:	bf18      	it	ne
 80014f0:	f044 0404 	orrne.w	r4, r4, #4
 80014f4:	073b      	lsls	r3, r7, #28
 80014f6:	bf48      	it	mi
 80014f8:	f024 0404 	bicmi.w	r4, r4, #4
 80014fc:	4648      	mov	r0, r9
 80014fe:	bf48      	it	mi
 8001500:	f044 0408 	orrmi.w	r4, r4, #8
 8001504:	f8cd 9000 	str.w	r9, [sp]
 8001508:	f7fe fe70 	bl	80001ec <strlen>
 800150c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001510:	2401      	movs	r4, #1
 8001512:	4620      	mov	r0, r4
 8001514:	4641      	mov	r1, r8
 8001516:	beab      	bkpt	0x00ab
 8001518:	4604      	mov	r4, r0
 800151a:	2c00      	cmp	r4, #0
 800151c:	db07      	blt.n	800152e <_swiopen+0x7e>
 800151e:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8001522:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8001526:	2300      	movs	r3, #0
 8001528:	6073      	str	r3, [r6, #4]
 800152a:	462c      	mov	r4, r5
 800152c:	e014      	b.n	8001558 <_swiopen+0xa8>
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff fe98 	bl	8001264 <error>
 8001534:	4604      	mov	r4, r0
 8001536:	e00f      	b.n	8001558 <_swiopen+0xa8>
 8001538:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 800153c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001540:	46e8      	mov	r8, sp
 8001542:	d1cb      	bne.n	80014dc <_swiopen+0x2c>
 8001544:	4641      	mov	r1, r8
 8001546:	4648      	mov	r0, r9
 8001548:	f7ff ff95 	bl	8001476 <_stat>
 800154c:	3001      	adds	r0, #1
 800154e:	d0c5      	beq.n	80014dc <_swiopen+0x2c>
 8001550:	f7ff f8f8 	bl	8000744 <__errno>
 8001554:	2311      	movs	r3, #17
 8001556:	6003      	str	r3, [r0, #0]
 8001558:	4620      	mov	r0, r4
 800155a:	b017      	add	sp, #92	; 0x5c
 800155c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001560:	200000a4 	.word	0x200000a4

08001564 <_get_semihosting_exts>:
 8001564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001568:	4606      	mov	r6, r0
 800156a:	460f      	mov	r7, r1
 800156c:	482a      	ldr	r0, [pc, #168]	; (8001618 <_get_semihosting_exts+0xb4>)
 800156e:	2100      	movs	r1, #0
 8001570:	4615      	mov	r5, r2
 8001572:	f7ff ff9d 	bl	80014b0 <_swiopen>
 8001576:	462a      	mov	r2, r5
 8001578:	4604      	mov	r4, r0
 800157a:	2100      	movs	r1, #0
 800157c:	4630      	mov	r0, r6
 800157e:	f7ff f97c 	bl	800087a <memset>
 8001582:	1c63      	adds	r3, r4, #1
 8001584:	d016      	beq.n	80015b4 <_get_semihosting_exts+0x50>
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff fe42 	bl	8001210 <findslot>
 800158c:	f04f 080c 	mov.w	r8, #12
 8001590:	4681      	mov	r9, r0
 8001592:	4640      	mov	r0, r8
 8001594:	4649      	mov	r1, r9
 8001596:	beab      	bkpt	0x00ab
 8001598:	4680      	mov	r8, r0
 800159a:	4640      	mov	r0, r8
 800159c:	f7ff fe52 	bl	8001244 <checkerror>
 80015a0:	2803      	cmp	r0, #3
 80015a2:	dd02      	ble.n	80015aa <_get_semihosting_exts+0x46>
 80015a4:	1ec3      	subs	r3, r0, #3
 80015a6:	42ab      	cmp	r3, r5
 80015a8:	dc08      	bgt.n	80015bc <_get_semihosting_exts+0x58>
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff ff0e 	bl	80013cc <_close>
 80015b0:	f04f 34ff 	mov.w	r4, #4294967295
 80015b4:	4620      	mov	r0, r4
 80015b6:	b003      	add	sp, #12
 80015b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015bc:	2204      	movs	r2, #4
 80015be:	eb0d 0102 	add.w	r1, sp, r2
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fe6c 	bl	80012a0 <_read>
 80015c8:	2803      	cmp	r0, #3
 80015ca:	ddee      	ble.n	80015aa <_get_semihosting_exts+0x46>
 80015cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80015d0:	2b53      	cmp	r3, #83	; 0x53
 80015d2:	d1ea      	bne.n	80015aa <_get_semihosting_exts+0x46>
 80015d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80015d8:	2b48      	cmp	r3, #72	; 0x48
 80015da:	d1e6      	bne.n	80015aa <_get_semihosting_exts+0x46>
 80015dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80015e0:	2b46      	cmp	r3, #70	; 0x46
 80015e2:	d1e2      	bne.n	80015aa <_get_semihosting_exts+0x46>
 80015e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80015e8:	2b42      	cmp	r3, #66	; 0x42
 80015ea:	d1de      	bne.n	80015aa <_get_semihosting_exts+0x46>
 80015ec:	2201      	movs	r2, #1
 80015ee:	4639      	mov	r1, r7
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff fe6f 	bl	80012d4 <_swilseek>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	dbd7      	blt.n	80015aa <_get_semihosting_exts+0x46>
 80015fa:	462a      	mov	r2, r5
 80015fc:	4631      	mov	r1, r6
 80015fe:	4620      	mov	r0, r4
 8001600:	f7ff fe4e 	bl	80012a0 <_read>
 8001604:	4605      	mov	r5, r0
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff fee0 	bl	80013cc <_close>
 800160c:	4628      	mov	r0, r5
 800160e:	f7ff fe19 	bl	8001244 <checkerror>
 8001612:	4604      	mov	r4, r0
 8001614:	e7ce      	b.n	80015b4 <_get_semihosting_exts+0x50>
 8001616:	bf00      	nop
 8001618:	08001860 	.word	0x08001860

0800161c <initialise_semihosting_exts>:
 800161c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800161e:	4d0a      	ldr	r5, [pc, #40]	; (8001648 <initialise_semihosting_exts+0x2c>)
 8001620:	4c0a      	ldr	r4, [pc, #40]	; (800164c <initialise_semihosting_exts+0x30>)
 8001622:	2100      	movs	r1, #0
 8001624:	2201      	movs	r2, #1
 8001626:	a801      	add	r0, sp, #4
 8001628:	6029      	str	r1, [r5, #0]
 800162a:	6022      	str	r2, [r4, #0]
 800162c:	f7ff ff9a 	bl	8001564 <_get_semihosting_exts>
 8001630:	2800      	cmp	r0, #0
 8001632:	dd07      	ble.n	8001644 <initialise_semihosting_exts+0x28>
 8001634:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001638:	f003 0201 	and.w	r2, r3, #1
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	602a      	str	r2, [r5, #0]
 8001642:	6023      	str	r3, [r4, #0]
 8001644:	b003      	add	sp, #12
 8001646:	bd30      	pop	{r4, r5, pc}
 8001648:	20000064 	.word	0x20000064
 800164c:	20000068 	.word	0x20000068

08001650 <_has_ext_stdout_stderr>:
 8001650:	b510      	push	{r4, lr}
 8001652:	4c04      	ldr	r4, [pc, #16]	; (8001664 <_has_ext_stdout_stderr+0x14>)
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	2a00      	cmp	r2, #0
 8001658:	da01      	bge.n	800165e <_has_ext_stdout_stderr+0xe>
 800165a:	f7ff ffdf 	bl	800161c <initialise_semihosting_exts>
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	bd10      	pop	{r4, pc}
 8001662:	bf00      	nop
 8001664:	20000068 	.word	0x20000068

08001668 <initialise_monitor_handles>:
 8001668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800166c:	b085      	sub	sp, #20
 800166e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001720 <initialise_monitor_handles+0xb8>
 8001672:	f8cd 9004 	str.w	r9, [sp, #4]
 8001676:	2303      	movs	r3, #3
 8001678:	2400      	movs	r4, #0
 800167a:	9303      	str	r3, [sp, #12]
 800167c:	f10d 0804 	add.w	r8, sp, #4
 8001680:	9402      	str	r4, [sp, #8]
 8001682:	2501      	movs	r5, #1
 8001684:	4628      	mov	r0, r5
 8001686:	4641      	mov	r1, r8
 8001688:	beab      	bkpt	0x00ab
 800168a:	4605      	mov	r5, r0
 800168c:	4e20      	ldr	r6, [pc, #128]	; (8001710 <initialise_monitor_handles+0xa8>)
 800168e:	4a21      	ldr	r2, [pc, #132]	; (8001714 <initialise_monitor_handles+0xac>)
 8001690:	6035      	str	r5, [r6, #0]
 8001692:	4623      	mov	r3, r4
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	4614      	mov	r4, r2
 800169a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800169e:	3301      	adds	r3, #1
 80016a0:	2b14      	cmp	r3, #20
 80016a2:	d1fa      	bne.n	800169a <initialise_monitor_handles+0x32>
 80016a4:	f7ff ffd4 	bl	8001650 <_has_ext_stdout_stderr>
 80016a8:	4d1b      	ldr	r5, [pc, #108]	; (8001718 <initialise_monitor_handles+0xb0>)
 80016aa:	b1d0      	cbz	r0, 80016e2 <initialise_monitor_handles+0x7a>
 80016ac:	f04f 0a03 	mov.w	sl, #3
 80016b0:	2304      	movs	r3, #4
 80016b2:	f8cd 9004 	str.w	r9, [sp, #4]
 80016b6:	2701      	movs	r7, #1
 80016b8:	f8cd a00c 	str.w	sl, [sp, #12]
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	4638      	mov	r0, r7
 80016c0:	4641      	mov	r1, r8
 80016c2:	beab      	bkpt	0x00ab
 80016c4:	4683      	mov	fp, r0
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <initialise_monitor_handles+0xb4>)
 80016c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80016cc:	f8c3 b000 	str.w	fp, [r3]
 80016d0:	2308      	movs	r3, #8
 80016d2:	f8cd a00c 	str.w	sl, [sp, #12]
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	4638      	mov	r0, r7
 80016da:	4641      	mov	r1, r8
 80016dc:	beab      	bkpt	0x00ab
 80016de:	4607      	mov	r7, r0
 80016e0:	602f      	str	r7, [r5, #0]
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	bf02      	ittt	eq
 80016e8:	4b0c      	ldreq	r3, [pc, #48]	; (800171c <initialise_monitor_handles+0xb4>)
 80016ea:	681b      	ldreq	r3, [r3, #0]
 80016ec:	602b      	streq	r3, [r5, #0]
 80016ee:	6833      	ldr	r3, [r6, #0]
 80016f0:	6023      	str	r3, [r4, #0]
 80016f2:	2600      	movs	r6, #0
 80016f4:	6066      	str	r6, [r4, #4]
 80016f6:	f7ff ffab 	bl	8001650 <_has_ext_stdout_stderr>
 80016fa:	b130      	cbz	r0, 800170a <initialise_monitor_handles+0xa2>
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <initialise_monitor_handles+0xb4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800170a:	b005      	add	sp, #20
 800170c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001710:	2000009c 	.word	0x2000009c
 8001714:	200000a4 	.word	0x200000a4
 8001718:	20000098 	.word	0x20000098
 800171c:	200000a0 	.word	0x200000a0
 8001720:	08001876 	.word	0x08001876

08001724 <_isatty>:
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	f7ff fd73 	bl	8001210 <findslot>
 800172a:	2509      	movs	r5, #9
 800172c:	4604      	mov	r4, r0
 800172e:	b920      	cbnz	r0, 800173a <_isatty+0x16>
 8001730:	f7ff f808 	bl	8000744 <__errno>
 8001734:	6005      	str	r5, [r0, #0]
 8001736:	4620      	mov	r0, r4
 8001738:	bd70      	pop	{r4, r5, r6, pc}
 800173a:	4628      	mov	r0, r5
 800173c:	4621      	mov	r1, r4
 800173e:	beab      	bkpt	0x00ab
 8001740:	4604      	mov	r4, r0
 8001742:	2c01      	cmp	r4, #1
 8001744:	d0f7      	beq.n	8001736 <_isatty+0x12>
 8001746:	f7fe fffd 	bl	8000744 <__errno>
 800174a:	2400      	movs	r4, #0
 800174c:	4605      	mov	r5, r0
 800174e:	2613      	movs	r6, #19
 8001750:	4630      	mov	r0, r6
 8001752:	4621      	mov	r1, r4
 8001754:	beab      	bkpt	0x00ab
 8001756:	4606      	mov	r6, r0
 8001758:	602e      	str	r6, [r5, #0]
 800175a:	e7ec      	b.n	8001736 <_isatty+0x12>

0800175c <_init>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr

08001768 <_fini>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr
