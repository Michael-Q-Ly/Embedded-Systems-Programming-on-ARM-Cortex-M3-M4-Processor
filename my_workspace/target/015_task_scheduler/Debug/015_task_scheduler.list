
015_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001428  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080015d4  080015d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016dc  080016dc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080016dc  080016dc  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016dc  080016dc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016dc  080016dc  000116dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016e0  080016e0  000116e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080016e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000000f8  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015d4  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000040f  00000000  00000000  0002167a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00021a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c0  00000000  00000000  00021b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021d9  00000000  00000000  00021c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d47  00000000  00000000  00023e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008750  00000000  00000000  00024b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0002d2a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cf0  00000000  00000000  0002d2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080015bc 	.word	0x080015bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000080 	.word	0x20000080
 80001e8:	080015bc 	.word	0x080015bc

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <main>:
void HardFault_Handler( void ) ;
void MemManage_Handler( void ) ;
void BusFault_Handler( void ) ;

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	initialise_monitor_handles() ;                                          				// Debugger
 8000200:	f001 f962 	bl	80014c8 <initialise_monitor_handles>

	enable_processor_faults() ;
 8000204:	f000 f8c6 	bl	8000394 <enable_processor_faults>

	// Initialize the scheduler stack (which is MSP)
	init_scheduler_stack( SCHED_STACK_START ) ;
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <main+0x40>)
 800020a:	f000 f877 	bl	80002fc <init_scheduler_stack>
	
	// Array-filling; capturing addresses of different task handlers
	task_handlers[0] = ( uint32_t )( task1_handler ) ;
 800020e:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <main+0x44>)
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <main+0x48>)
 8000212:	601a      	str	r2, [r3, #0]
	task_handlers[1] = ( uint32_t )( task2_handler ) ;
 8000214:	4a0c      	ldr	r2, [pc, #48]	; (8000248 <main+0x4c>)
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <main+0x48>)
 8000218:	605a      	str	r2, [r3, #4]
	task_handlers[2] = ( uint32_t )( task3_handler ) ;
 800021a:	4a0c      	ldr	r2, [pc, #48]	; (800024c <main+0x50>)
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <main+0x48>)
 800021e:	609a      	str	r2, [r3, #8]
	task_handlers[3] = ( uint32_t )( task4_handler ) ;
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <main+0x54>)
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0x48>)
 8000224:	60da      	str	r2, [r3, #12]

	// Task stack initialization to store the dummy frames  
	init_tasks_stack() ;
 8000226:	f000 f86f 	bl	8000308 <init_tasks_stack>

	// Generate SysTick timer exception
	init_systick_timer( TICK_HZ ) ;
 800022a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022e:	f000 f831 	bl	8000294 <init_systick_timer>
	
	// Switch from MSP to PSP
	switch_sp_to_psp() ;
 8000232:	f000 f907 	bl	8000444 <switch_sp_to_psp>

	task1_handler() ;
 8000236:	f000 f80d 	bl	8000254 <task1_handler>

	/* Loop forever */
	for(;;);
 800023a:	e7fe      	b.n	800023a <main+0x3e>
 800023c:	2001f000 	.word	0x2001f000
 8000240:	08000255 	.word	0x08000255
 8000244:	20000154 	.word	0x20000154
 8000248:	08000265 	.word	0x08000265
 800024c:	08000275 	.word	0x08000275
 8000250:	08000285 	.word	0x08000285

08000254 <task1_handler>:
}


void task1_handler( void ) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	while ( 1 ) {
		printf( "This is task1\n" ) ;
 8000258:	4801      	ldr	r0, [pc, #4]	; (8000260 <task1_handler+0xc>)
 800025a:	f000 fab5 	bl	80007c8 <puts>
 800025e:	e7fb      	b.n	8000258 <task1_handler+0x4>
 8000260:	080015d4 	.word	0x080015d4

08000264 <task2_handler>:
	}
}

void task2_handler( void ) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	while ( 1 ) {
		printf( "This is task2\n" ) ;
 8000268:	4801      	ldr	r0, [pc, #4]	; (8000270 <task2_handler+0xc>)
 800026a:	f000 faad 	bl	80007c8 <puts>
 800026e:	e7fb      	b.n	8000268 <task2_handler+0x4>
 8000270:	080015e4 	.word	0x080015e4

08000274 <task3_handler>:

	}
}

void task3_handler( void ) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	while ( 1 ) {
		printf( "This is task3\n" ) ;
 8000278:	4801      	ldr	r0, [pc, #4]	; (8000280 <task3_handler+0xc>)
 800027a:	f000 faa5 	bl	80007c8 <puts>
 800027e:	e7fb      	b.n	8000278 <task3_handler+0x4>
 8000280:	080015f4 	.word	0x080015f4

08000284 <task4_handler>:

	}
}

void task4_handler( void ) {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	while ( 1 ) {
		printf( "This is task4\n" ) ;
 8000288:	4801      	ldr	r0, [pc, #4]	; (8000290 <task4_handler+0xc>)
 800028a:	f000 fa9d 	bl	80007c8 <puts>
 800028e:	e7fb      	b.n	8000288 <task4_handler+0x4>
 8000290:	08001604 	.word	0x08001604

08000294 <init_systick_timer>:

	}
}

void init_systick_timer( uint32_t tick_hz ) {
 8000294:	b480      	push	{r7}
 8000296:	b087      	sub	sp, #28
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	 * 1. Program Reload Value Count
	 * 2. Clear current value of SVR
	 * 3. Program Control and Status register
	 */
	// Program the reload value
	uint32_t *pSRVR = ( uint32_t* )( 0xE000E014 ) ;							// Address of SysTick Reload Value Register
 800029c:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <init_systick_timer+0x5c>)
 800029e:	617b      	str	r3, [r7, #20]
	uint32_t count_value = ( SYSTICK_TIM_CLK / tick_hz ) - 1 ;
 80002a0:	4a14      	ldr	r2, [pc, #80]	; (80002f4 <init_systick_timer+0x60>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a8:	3b01      	subs	r3, #1
 80002aa:	613b      	str	r3, [r7, #16]


	// Clear the value of SVR
	*pSRVR &= ~ ( 0x00FFFFFFFF) ;									// Only 24 bits are valid in this register
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
	// Load the value into SVR
	*pSRVR |= count_value ;
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	431a      	orrs	r2, r3
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	601a      	str	r2, [r3, #0]

	// Modify the Control and Status Register settings
	uint32_t *pSCSR = ( uint32_t* )( 0xE000E010 ) ;							// Address of SysTick Control and Status Regiser
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <init_systick_timer+0x64>)
 80002c0:	60fb      	str	r3, [r7, #12]
	*pSCSR |= ( 1 << 1 ) ;										// Enables SysTick exception request
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0202 	orr.w	r2, r3, #2
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	601a      	str	r2, [r3, #0]
	*pSCSR |= ( 1 << 2 ) ;										// Indicates the clock source as the processor clock
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0204 	orr.w	r2, r3, #4
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	601a      	str	r2, [r3, #0]

	// Enable the SysTick
	*pSCSR |= ( 1 << 0 ) ;										// Enables the counter
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0201 	orr.w	r2, r3, #1
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	371c      	adds	r7, #28
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	e000e014 	.word	0xe000e014
 80002f4:	00f42400 	.word	0x00f42400
 80002f8:	e000e010 	.word	0xe000e010

080002fc <init_scheduler_stack>:

__attribute__( (naked) ) void init_scheduler_stack( uint32_t sched_top_of_stack ) {
 80002fc:	4603      	mov	r3, r0
//	__asm volatile ( "MSR MSP, R0" ) ;
	__asm volatile( "MSR MSP, %0" : : "r" ( sched_top_of_stack ) : ) ;				// The GCC inline with C variable equivalent of above
 80002fe:	f383 8808 	msr	MSP, r3
	__asm volatile ( "BX LR" ) ;									// BX copies the value of LR into PC, where LR contains the return address
 8000302:	4770      	bx	lr
}
 8000304:	bf00      	nop
	...

08000308 <init_tasks_stack>:

void init_tasks_stack( void ) {
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0

	uint32_t *pPSP ;
	for (int i = 0 ; i < MAX_TASKS ; i++ ) {
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	e032      	b.n	800037a <init_tasks_stack+0x72>
		pPSP = ( uint32_t* )( psp_of_tasks[i] ) ;
 8000314:	4a1d      	ldr	r2, [pc, #116]	; (800038c <init_tasks_stack+0x84>)
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800031c:	60fb      	str	r3, [r7, #12]
		
		pPSP-- ;										// xPSR
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	3b04      	subs	r3, #4
 8000322:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR ;									// 0x01000000
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800032a:	601a      	str	r2, [r3, #0]

		pPSP-- ;										// PC
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3b04      	subs	r3, #4
 8000330:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i] ;
 8000332:	4a17      	ldr	r2, [pc, #92]	; (8000390 <init_tasks_stack+0x88>)
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	601a      	str	r2, [r3, #0]

		pPSP-- ;										// LR
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3b04      	subs	r3, #4
 8000342:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD ;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f06f 0202 	mvn.w	r2, #2
 800034a:	601a      	str	r2, [r3, #0]

		// Registers R0 through R12:
		for ( int j = 0 ; j < 13 ; j++ ) {
 800034c:	2300      	movs	r3, #0
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	e008      	b.n	8000364 <init_tasks_stack+0x5c>
			pPSP-- ;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
			*pPSP = 0 ;
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
		for ( int j = 0 ; j < 13 ; j++ ) {
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3301      	adds	r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b0c      	cmp	r3, #12
 8000368:	ddf3      	ble.n	8000352 <init_tasks_stack+0x4a>
		}

		// Preserve the value of PSP once you have loaded the Stack Frame.
		psp_of_tasks[i] = ( uint32_t)( pPSP ) ;
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	4907      	ldr	r1, [pc, #28]	; (800038c <init_tasks_stack+0x84>)
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0 ; i < MAX_TASKS ; i++ ) {
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	3301      	adds	r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	2b03      	cmp	r3, #3
 800037e:	ddc9      	ble.n	8000314 <init_tasks_stack+0xc>
	}
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	20000000 	.word	0x20000000
 8000390:	20000154 	.word	0x20000154

08000394 <enable_processor_faults>:

void enable_processor_faults( void ) {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = ( uint32_t* )( 0xE000ED24 ) ;						// System Handler Control & State Register
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <enable_processor_faults+0x38>)
 800039c:	607b      	str	r3, [r7, #4]
	*pSHCSR |= ( 1 << 16 ) ;	// Memory Manage
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17 ) ;	// Bus Fault
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18 ) ;	// Usage Fault
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	e000ed24 	.word	0xe000ed24

080003d0 <get_psp_value>:

uint32_t get_psp_value( void ) {
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task] ;
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <get_psp_value+0x18>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4b04      	ldr	r3, [pc, #16]	; (80003ec <get_psp_value+0x1c>)
 80003dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	20000098 	.word	0x20000098
 80003ec:	20000000 	.word	0x20000000

080003f0 <save_psp_value>:

void save_psp_value( uint32_t current_psp_value ) {
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value ;
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <save_psp_value+0x20>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	4619      	mov	r1, r3
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <save_psp_value+0x24>)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	20000098 	.word	0x20000098
 8000414:	20000000 	.word	0x20000000

08000418 <update_next_task>:

void update_next_task( void ) {
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	current_task++ ;
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <update_next_task+0x28>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <update_next_task+0x28>)
 8000426:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS ;									// Task 0 through 3
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <update_next_task+0x28>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	f003 0303 	and.w	r3, r3, #3
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4b03      	ldr	r3, [pc, #12]	; (8000440 <update_next_task+0x28>)
 8000434:	701a      	strb	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000098 	.word	0x20000098

08000444 <switch_sp_to_psp>:
	 *
	 * Also, since this function is called from main(), LR is holding some value that connects to main(). We call
	 * get_psp_value() in the function, though, so LR gets corrupted.
	 * Thus, we have to PUSH (save) LR because we want it later. We then pop it back.
	 */
	__asm volatile ( "PUSH {LR} " ) ;								// Preserve LR, which connects back to main()
 8000444:	b500      	push	{lr}
	__asm volatile ( "BL get_psp_value" ) ;								// Branch and link to come back to the function; branch only takes you to the function
 8000446:	f7ff ffc3 	bl	80003d0 <get_psp_value>
	__asm volatile ( "MSR PSP, R0" ) ;								// Initialize PSP
 800044a:	f380 8809 	msr	PSP, r0
	__asm volatile ( "POP {LR} " ) ;								// Pops back LR value
 800044e:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. Change SP to PSP using CONTROL register
	// The CONTROL register is a special register, thus the function must be a naked function
	__asm volatile ( "MOV R0, #0x02" ) ;								// Refer to M4 User Manual: Switch to PSP
 8000452:	f04f 0002 	mov.w	r0, #2
	__asm volatile ( "MSR CONTROL, R0" ) ;
 8000456:	f380 8814 	msr	CONTROL, r0
	__asm volatile ( "BX LR" ) ;									// LR will be copied into PC, which takes us back to main()
 800045a:	4770      	bx	lr
}
 800045c:	bf00      	nop

0800045e <SysTick_Handler>:
__attribute__( (naked) ) void SysTick_Handler( void ) {

	/* Save the context of current task */

	// 1. Get current running task's PSP value
	__asm volatile ( "MRS R0, PSP" ) ;	
 800045e:	f3ef 8009 	mrs	r0, PSP
	// 2. Using that PSP value, store SF2 (R4 to R11)
	__asm volatile ( "STMDB R0!, {R4-R11}" ) ;							// Store multiple registers into memory; "!" allows R0 to get updated after each store
 8000462:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile ( "PUSH {LR}" ) ;
 8000466:	b500      	push	{lr}
	// 3. Save the current value of PSP
	__asm volatile ( "BL save_psp_value" ) ;	
 8000468:	f7ff ffc2 	bl	80003f0 <save_psp_value>


	/* Retrieve the context of the next task */
	
	// 1. Decide next task to run
	__asm volatile ( "BL update_next_task" ) ;		
 800046c:	f7ff ffd4 	bl	8000418 <update_next_task>
	// 2. Get its past PSP value
	__asm volatile ( "BL get_psp_value" ) ;
 8000470:	f7ff ffae 	bl	80003d0 <get_psp_value>
	// 3. Using that PSP value, retrieve SF2 (R4 to R11)
	__asm volatile ( "LDMIA R0!, {R4-r11}" ) ;	
 8000474:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// 4. Update PSP and exit
	__asm volatile ( "MSR PSP, R0" ) ;
 8000478:	f380 8809 	msr	PSP, r0
	__asm volatile ( "POP {LR}" ) ;
 800047c:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile ( "BX LR" ) ;
 8000480:	4770      	bx	lr
}
 8000482:	bf00      	nop

08000484 <HardFault_Handler>:

// 2. Implement the fault handlers
void HardFault_Handler( void ) {
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	fprintf( stderr, "Exception: Hardfault\n" ) ;
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <HardFault_Handler+0x18>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	2215      	movs	r2, #21
 8000490:	2101      	movs	r1, #1
 8000492:	4803      	ldr	r0, [pc, #12]	; (80004a0 <HardFault_Handler+0x1c>)
 8000494:	f000 f8ec 	bl	8000670 <fwrite>
	while( 1 ) ;
 8000498:	e7fe      	b.n	8000498 <HardFault_Handler+0x14>
 800049a:	bf00      	nop
 800049c:	20000010 	.word	0x20000010
 80004a0:	08001614 	.word	0x08001614

080004a4 <MemManage_Handler>:
}

void MemManage_Handler( void ) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	fprintf( stderr, "Exception: MemManage\n" ) ;
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <MemManage_Handler+0x18>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	2215      	movs	r2, #21
 80004b0:	2101      	movs	r1, #1
 80004b2:	4803      	ldr	r0, [pc, #12]	; (80004c0 <MemManage_Handler+0x1c>)
 80004b4:	f000 f8dc 	bl	8000670 <fwrite>
	while( 1 ) ;
 80004b8:	e7fe      	b.n	80004b8 <MemManage_Handler+0x14>
 80004ba:	bf00      	nop
 80004bc:	20000010 	.word	0x20000010
 80004c0:	0800162c 	.word	0x0800162c

080004c4 <BusFault_Handler>:
}

void BusFault_Handler( void ) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	fprintf( stderr, "Exception: Busfault\n" ) ;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <BusFault_Handler+0x18>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	2214      	movs	r2, #20
 80004d0:	2101      	movs	r1, #1
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <BusFault_Handler+0x1c>)
 80004d4:	f000 f8cc 	bl	8000670 <fwrite>
	while( 1 ) ;
 80004d8:	e7fe      	b.n	80004d8 <BusFault_Handler+0x14>
 80004da:	bf00      	nop
 80004dc:	20000010 	.word	0x20000010
 80004e0:	08001644 	.word	0x08001644

080004e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <_sbrk+0x5c>)
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <_sbrk+0x60>)
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <_sbrk+0x64>)
 8000502:	4a12      	ldr	r2, [pc, #72]	; (800054c <_sbrk+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	429a      	cmp	r2, r3
 8000512:	d207      	bcs.n	8000524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000514:	f000 f846 	bl	80005a4 <__errno>
 8000518:	4603      	mov	r3, r0
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	e009      	b.n	8000538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <_sbrk+0x64>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <_sbrk+0x64>)
 8000534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20030000 	.word	0x20030000
 8000544:	00000400 	.word	0x00000400
 8000548:	2000009c 	.word	0x2000009c
 800054c:	20000178 	.word	0x20000178

08000550 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000552:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000554:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <LoopForever+0x6>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	; (8000590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <LoopForever+0xe>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	; (800059c <LoopForever+0x16>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057e:	f000 f885 	bl	800068c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff fe3b 	bl	80001fc <main>

08000586 <LoopForever>:

LoopForever:
    b LoopForever
 8000586:	e7fe      	b.n	8000586 <LoopForever>
  ldr   r0, =_estack
 8000588:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000594:	080016e4 	.word	0x080016e4
  ldr r2, =_sbss
 8000598:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800059c:	20000174 	.word	0x20000174

080005a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC_IRQHandler>
	...

080005a4 <__errno>:
 80005a4:	4b01      	ldr	r3, [pc, #4]	; (80005ac <__errno+0x8>)
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000010 	.word	0x20000010

080005b0 <_fwrite_r>:
 80005b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005b4:	9c08      	ldr	r4, [sp, #32]
 80005b6:	4689      	mov	r9, r1
 80005b8:	4617      	mov	r7, r2
 80005ba:	fb02 f803 	mul.w	r8, r2, r3
 80005be:	4605      	mov	r5, r0
 80005c0:	b118      	cbz	r0, 80005ca <_fwrite_r+0x1a>
 80005c2:	6983      	ldr	r3, [r0, #24]
 80005c4:	b90b      	cbnz	r3, 80005ca <_fwrite_r+0x1a>
 80005c6:	f000 fae1 	bl	8000b8c <__sinit>
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <_fwrite_r+0xb4>)
 80005cc:	429c      	cmp	r4, r3
 80005ce:	d123      	bne.n	8000618 <_fwrite_r+0x68>
 80005d0:	686c      	ldr	r4, [r5, #4]
 80005d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005d4:	07de      	lsls	r6, r3, #31
 80005d6:	d405      	bmi.n	80005e4 <_fwrite_r+0x34>
 80005d8:	89a3      	ldrh	r3, [r4, #12]
 80005da:	0598      	lsls	r0, r3, #22
 80005dc:	d402      	bmi.n	80005e4 <_fwrite_r+0x34>
 80005de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005e0:	f000 f879 	bl	80006d6 <__retarget_lock_acquire_recursive>
 80005e4:	89a3      	ldrh	r3, [r4, #12]
 80005e6:	0719      	lsls	r1, r3, #28
 80005e8:	d520      	bpl.n	800062c <_fwrite_r+0x7c>
 80005ea:	6923      	ldr	r3, [r4, #16]
 80005ec:	b1f3      	cbz	r3, 800062c <_fwrite_r+0x7c>
 80005ee:	2600      	movs	r6, #0
 80005f0:	4546      	cmp	r6, r8
 80005f2:	d029      	beq.n	8000648 <_fwrite_r+0x98>
 80005f4:	68a0      	ldr	r0, [r4, #8]
 80005f6:	f819 1006 	ldrb.w	r1, [r9, r6]
 80005fa:	3801      	subs	r0, #1
 80005fc:	2800      	cmp	r0, #0
 80005fe:	60a0      	str	r0, [r4, #8]
 8000600:	da04      	bge.n	800060c <_fwrite_r+0x5c>
 8000602:	69a3      	ldr	r3, [r4, #24]
 8000604:	4298      	cmp	r0, r3
 8000606:	db19      	blt.n	800063c <_fwrite_r+0x8c>
 8000608:	290a      	cmp	r1, #10
 800060a:	d017      	beq.n	800063c <_fwrite_r+0x8c>
 800060c:	6823      	ldr	r3, [r4, #0]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	6022      	str	r2, [r4, #0]
 8000612:	7019      	strb	r1, [r3, #0]
 8000614:	3601      	adds	r6, #1
 8000616:	e7eb      	b.n	80005f0 <_fwrite_r+0x40>
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <_fwrite_r+0xb8>)
 800061a:	429c      	cmp	r4, r3
 800061c:	d101      	bne.n	8000622 <_fwrite_r+0x72>
 800061e:	68ac      	ldr	r4, [r5, #8]
 8000620:	e7d7      	b.n	80005d2 <_fwrite_r+0x22>
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <_fwrite_r+0xbc>)
 8000624:	429c      	cmp	r4, r3
 8000626:	bf08      	it	eq
 8000628:	68ec      	ldreq	r4, [r5, #12]
 800062a:	e7d2      	b.n	80005d2 <_fwrite_r+0x22>
 800062c:	4621      	mov	r1, r4
 800062e:	4628      	mov	r0, r5
 8000630:	f000 f924 	bl	800087c <__swsetup_r>
 8000634:	2800      	cmp	r0, #0
 8000636:	d0da      	beq.n	80005ee <_fwrite_r+0x3e>
 8000638:	2600      	movs	r6, #0
 800063a:	e005      	b.n	8000648 <_fwrite_r+0x98>
 800063c:	4622      	mov	r2, r4
 800063e:	4628      	mov	r0, r5
 8000640:	f000 f8ca 	bl	80007d8 <__swbuf_r>
 8000644:	3001      	adds	r0, #1
 8000646:	d1e5      	bne.n	8000614 <_fwrite_r+0x64>
 8000648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800064a:	07da      	lsls	r2, r3, #31
 800064c:	d405      	bmi.n	800065a <_fwrite_r+0xaa>
 800064e:	89a3      	ldrh	r3, [r4, #12]
 8000650:	059b      	lsls	r3, r3, #22
 8000652:	d402      	bmi.n	800065a <_fwrite_r+0xaa>
 8000654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000656:	f000 f83f 	bl	80006d8 <__retarget_lock_release_recursive>
 800065a:	fbb6 f0f7 	udiv	r0, r6, r7
 800065e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000662:	bf00      	nop
 8000664:	08001680 	.word	0x08001680
 8000668:	080016a0 	.word	0x080016a0
 800066c:	08001660 	.word	0x08001660

08000670 <fwrite>:
 8000670:	b507      	push	{r0, r1, r2, lr}
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4613      	mov	r3, r2
 8000676:	460a      	mov	r2, r1
 8000678:	4601      	mov	r1, r0
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <fwrite+0x18>)
 800067c:	6800      	ldr	r0, [r0, #0]
 800067e:	f7ff ff97 	bl	80005b0 <_fwrite_r>
 8000682:	b003      	add	sp, #12
 8000684:	f85d fb04 	ldr.w	pc, [sp], #4
 8000688:	20000010 	.word	0x20000010

0800068c <__libc_init_array>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	4d0d      	ldr	r5, [pc, #52]	; (80006c4 <__libc_init_array+0x38>)
 8000690:	4c0d      	ldr	r4, [pc, #52]	; (80006c8 <__libc_init_array+0x3c>)
 8000692:	1b64      	subs	r4, r4, r5
 8000694:	10a4      	asrs	r4, r4, #2
 8000696:	2600      	movs	r6, #0
 8000698:	42a6      	cmp	r6, r4
 800069a:	d109      	bne.n	80006b0 <__libc_init_array+0x24>
 800069c:	4d0b      	ldr	r5, [pc, #44]	; (80006cc <__libc_init_array+0x40>)
 800069e:	4c0c      	ldr	r4, [pc, #48]	; (80006d0 <__libc_init_array+0x44>)
 80006a0:	f000 ff8c 	bl	80015bc <_init>
 80006a4:	1b64      	subs	r4, r4, r5
 80006a6:	10a4      	asrs	r4, r4, #2
 80006a8:	2600      	movs	r6, #0
 80006aa:	42a6      	cmp	r6, r4
 80006ac:	d105      	bne.n	80006ba <__libc_init_array+0x2e>
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b4:	4798      	blx	r3
 80006b6:	3601      	adds	r6, #1
 80006b8:	e7ee      	b.n	8000698 <__libc_init_array+0xc>
 80006ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80006be:	4798      	blx	r3
 80006c0:	3601      	adds	r6, #1
 80006c2:	e7f2      	b.n	80006aa <__libc_init_array+0x1e>
 80006c4:	080016dc 	.word	0x080016dc
 80006c8:	080016dc 	.word	0x080016dc
 80006cc:	080016dc 	.word	0x080016dc
 80006d0:	080016e0 	.word	0x080016e0

080006d4 <__retarget_lock_init_recursive>:
 80006d4:	4770      	bx	lr

080006d6 <__retarget_lock_acquire_recursive>:
 80006d6:	4770      	bx	lr

080006d8 <__retarget_lock_release_recursive>:
 80006d8:	4770      	bx	lr

080006da <memset>:
 80006da:	4402      	add	r2, r0
 80006dc:	4603      	mov	r3, r0
 80006de:	4293      	cmp	r3, r2
 80006e0:	d100      	bne.n	80006e4 <memset+0xa>
 80006e2:	4770      	bx	lr
 80006e4:	f803 1b01 	strb.w	r1, [r3], #1
 80006e8:	e7f9      	b.n	80006de <memset+0x4>
	...

080006ec <_puts_r>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	460e      	mov	r6, r1
 80006f0:	4605      	mov	r5, r0
 80006f2:	b118      	cbz	r0, 80006fc <_puts_r+0x10>
 80006f4:	6983      	ldr	r3, [r0, #24]
 80006f6:	b90b      	cbnz	r3, 80006fc <_puts_r+0x10>
 80006f8:	f000 fa48 	bl	8000b8c <__sinit>
 80006fc:	69ab      	ldr	r3, [r5, #24]
 80006fe:	68ac      	ldr	r4, [r5, #8]
 8000700:	b913      	cbnz	r3, 8000708 <_puts_r+0x1c>
 8000702:	4628      	mov	r0, r5
 8000704:	f000 fa42 	bl	8000b8c <__sinit>
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <_puts_r+0xd0>)
 800070a:	429c      	cmp	r4, r3
 800070c:	d120      	bne.n	8000750 <_puts_r+0x64>
 800070e:	686c      	ldr	r4, [r5, #4]
 8000710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000712:	07db      	lsls	r3, r3, #31
 8000714:	d405      	bmi.n	8000722 <_puts_r+0x36>
 8000716:	89a3      	ldrh	r3, [r4, #12]
 8000718:	0598      	lsls	r0, r3, #22
 800071a:	d402      	bmi.n	8000722 <_puts_r+0x36>
 800071c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800071e:	f7ff ffda 	bl	80006d6 <__retarget_lock_acquire_recursive>
 8000722:	89a3      	ldrh	r3, [r4, #12]
 8000724:	0719      	lsls	r1, r3, #28
 8000726:	d51d      	bpl.n	8000764 <_puts_r+0x78>
 8000728:	6923      	ldr	r3, [r4, #16]
 800072a:	b1db      	cbz	r3, 8000764 <_puts_r+0x78>
 800072c:	3e01      	subs	r6, #1
 800072e:	68a3      	ldr	r3, [r4, #8]
 8000730:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000734:	3b01      	subs	r3, #1
 8000736:	60a3      	str	r3, [r4, #8]
 8000738:	bb39      	cbnz	r1, 800078a <_puts_r+0x9e>
 800073a:	2b00      	cmp	r3, #0
 800073c:	da38      	bge.n	80007b0 <_puts_r+0xc4>
 800073e:	4622      	mov	r2, r4
 8000740:	210a      	movs	r1, #10
 8000742:	4628      	mov	r0, r5
 8000744:	f000 f848 	bl	80007d8 <__swbuf_r>
 8000748:	3001      	adds	r0, #1
 800074a:	d011      	beq.n	8000770 <_puts_r+0x84>
 800074c:	250a      	movs	r5, #10
 800074e:	e011      	b.n	8000774 <_puts_r+0x88>
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <_puts_r+0xd4>)
 8000752:	429c      	cmp	r4, r3
 8000754:	d101      	bne.n	800075a <_puts_r+0x6e>
 8000756:	68ac      	ldr	r4, [r5, #8]
 8000758:	e7da      	b.n	8000710 <_puts_r+0x24>
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <_puts_r+0xd8>)
 800075c:	429c      	cmp	r4, r3
 800075e:	bf08      	it	eq
 8000760:	68ec      	ldreq	r4, [r5, #12]
 8000762:	e7d5      	b.n	8000710 <_puts_r+0x24>
 8000764:	4621      	mov	r1, r4
 8000766:	4628      	mov	r0, r5
 8000768:	f000 f888 	bl	800087c <__swsetup_r>
 800076c:	2800      	cmp	r0, #0
 800076e:	d0dd      	beq.n	800072c <_puts_r+0x40>
 8000770:	f04f 35ff 	mov.w	r5, #4294967295
 8000774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000776:	07da      	lsls	r2, r3, #31
 8000778:	d405      	bmi.n	8000786 <_puts_r+0x9a>
 800077a:	89a3      	ldrh	r3, [r4, #12]
 800077c:	059b      	lsls	r3, r3, #22
 800077e:	d402      	bmi.n	8000786 <_puts_r+0x9a>
 8000780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000782:	f7ff ffa9 	bl	80006d8 <__retarget_lock_release_recursive>
 8000786:	4628      	mov	r0, r5
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	2b00      	cmp	r3, #0
 800078c:	da04      	bge.n	8000798 <_puts_r+0xac>
 800078e:	69a2      	ldr	r2, [r4, #24]
 8000790:	429a      	cmp	r2, r3
 8000792:	dc06      	bgt.n	80007a2 <_puts_r+0xb6>
 8000794:	290a      	cmp	r1, #10
 8000796:	d004      	beq.n	80007a2 <_puts_r+0xb6>
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	6022      	str	r2, [r4, #0]
 800079e:	7019      	strb	r1, [r3, #0]
 80007a0:	e7c5      	b.n	800072e <_puts_r+0x42>
 80007a2:	4622      	mov	r2, r4
 80007a4:	4628      	mov	r0, r5
 80007a6:	f000 f817 	bl	80007d8 <__swbuf_r>
 80007aa:	3001      	adds	r0, #1
 80007ac:	d1bf      	bne.n	800072e <_puts_r+0x42>
 80007ae:	e7df      	b.n	8000770 <_puts_r+0x84>
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	250a      	movs	r5, #10
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	6022      	str	r2, [r4, #0]
 80007b8:	701d      	strb	r5, [r3, #0]
 80007ba:	e7db      	b.n	8000774 <_puts_r+0x88>
 80007bc:	08001680 	.word	0x08001680
 80007c0:	080016a0 	.word	0x080016a0
 80007c4:	08001660 	.word	0x08001660

080007c8 <puts>:
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <puts+0xc>)
 80007ca:	4601      	mov	r1, r0
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	f7ff bf8d 	b.w	80006ec <_puts_r>
 80007d2:	bf00      	nop
 80007d4:	20000010 	.word	0x20000010

080007d8 <__swbuf_r>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	460e      	mov	r6, r1
 80007dc:	4614      	mov	r4, r2
 80007de:	4605      	mov	r5, r0
 80007e0:	b118      	cbz	r0, 80007ea <__swbuf_r+0x12>
 80007e2:	6983      	ldr	r3, [r0, #24]
 80007e4:	b90b      	cbnz	r3, 80007ea <__swbuf_r+0x12>
 80007e6:	f000 f9d1 	bl	8000b8c <__sinit>
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <__swbuf_r+0x98>)
 80007ec:	429c      	cmp	r4, r3
 80007ee:	d12b      	bne.n	8000848 <__swbuf_r+0x70>
 80007f0:	686c      	ldr	r4, [r5, #4]
 80007f2:	69a3      	ldr	r3, [r4, #24]
 80007f4:	60a3      	str	r3, [r4, #8]
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	071a      	lsls	r2, r3, #28
 80007fa:	d52f      	bpl.n	800085c <__swbuf_r+0x84>
 80007fc:	6923      	ldr	r3, [r4, #16]
 80007fe:	b36b      	cbz	r3, 800085c <__swbuf_r+0x84>
 8000800:	6923      	ldr	r3, [r4, #16]
 8000802:	6820      	ldr	r0, [r4, #0]
 8000804:	1ac0      	subs	r0, r0, r3
 8000806:	6963      	ldr	r3, [r4, #20]
 8000808:	b2f6      	uxtb	r6, r6
 800080a:	4283      	cmp	r3, r0
 800080c:	4637      	mov	r7, r6
 800080e:	dc04      	bgt.n	800081a <__swbuf_r+0x42>
 8000810:	4621      	mov	r1, r4
 8000812:	4628      	mov	r0, r5
 8000814:	f000 f926 	bl	8000a64 <_fflush_r>
 8000818:	bb30      	cbnz	r0, 8000868 <__swbuf_r+0x90>
 800081a:	68a3      	ldr	r3, [r4, #8]
 800081c:	3b01      	subs	r3, #1
 800081e:	60a3      	str	r3, [r4, #8]
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	6022      	str	r2, [r4, #0]
 8000826:	701e      	strb	r6, [r3, #0]
 8000828:	6963      	ldr	r3, [r4, #20]
 800082a:	3001      	adds	r0, #1
 800082c:	4283      	cmp	r3, r0
 800082e:	d004      	beq.n	800083a <__swbuf_r+0x62>
 8000830:	89a3      	ldrh	r3, [r4, #12]
 8000832:	07db      	lsls	r3, r3, #31
 8000834:	d506      	bpl.n	8000844 <__swbuf_r+0x6c>
 8000836:	2e0a      	cmp	r6, #10
 8000838:	d104      	bne.n	8000844 <__swbuf_r+0x6c>
 800083a:	4621      	mov	r1, r4
 800083c:	4628      	mov	r0, r5
 800083e:	f000 f911 	bl	8000a64 <_fflush_r>
 8000842:	b988      	cbnz	r0, 8000868 <__swbuf_r+0x90>
 8000844:	4638      	mov	r0, r7
 8000846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <__swbuf_r+0x9c>)
 800084a:	429c      	cmp	r4, r3
 800084c:	d101      	bne.n	8000852 <__swbuf_r+0x7a>
 800084e:	68ac      	ldr	r4, [r5, #8]
 8000850:	e7cf      	b.n	80007f2 <__swbuf_r+0x1a>
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <__swbuf_r+0xa0>)
 8000854:	429c      	cmp	r4, r3
 8000856:	bf08      	it	eq
 8000858:	68ec      	ldreq	r4, [r5, #12]
 800085a:	e7ca      	b.n	80007f2 <__swbuf_r+0x1a>
 800085c:	4621      	mov	r1, r4
 800085e:	4628      	mov	r0, r5
 8000860:	f000 f80c 	bl	800087c <__swsetup_r>
 8000864:	2800      	cmp	r0, #0
 8000866:	d0cb      	beq.n	8000800 <__swbuf_r+0x28>
 8000868:	f04f 37ff 	mov.w	r7, #4294967295
 800086c:	e7ea      	b.n	8000844 <__swbuf_r+0x6c>
 800086e:	bf00      	nop
 8000870:	08001680 	.word	0x08001680
 8000874:	080016a0 	.word	0x080016a0
 8000878:	08001660 	.word	0x08001660

0800087c <__swsetup_r>:
 800087c:	4b32      	ldr	r3, [pc, #200]	; (8000948 <__swsetup_r+0xcc>)
 800087e:	b570      	push	{r4, r5, r6, lr}
 8000880:	681d      	ldr	r5, [r3, #0]
 8000882:	4606      	mov	r6, r0
 8000884:	460c      	mov	r4, r1
 8000886:	b125      	cbz	r5, 8000892 <__swsetup_r+0x16>
 8000888:	69ab      	ldr	r3, [r5, #24]
 800088a:	b913      	cbnz	r3, 8000892 <__swsetup_r+0x16>
 800088c:	4628      	mov	r0, r5
 800088e:	f000 f97d 	bl	8000b8c <__sinit>
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <__swsetup_r+0xd0>)
 8000894:	429c      	cmp	r4, r3
 8000896:	d10f      	bne.n	80008b8 <__swsetup_r+0x3c>
 8000898:	686c      	ldr	r4, [r5, #4]
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008a0:	0719      	lsls	r1, r3, #28
 80008a2:	d42c      	bmi.n	80008fe <__swsetup_r+0x82>
 80008a4:	06dd      	lsls	r5, r3, #27
 80008a6:	d411      	bmi.n	80008cc <__swsetup_r+0x50>
 80008a8:	2309      	movs	r3, #9
 80008aa:	6033      	str	r3, [r6, #0]
 80008ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008b0:	81a3      	strh	r3, [r4, #12]
 80008b2:	f04f 30ff 	mov.w	r0, #4294967295
 80008b6:	e03e      	b.n	8000936 <__swsetup_r+0xba>
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <__swsetup_r+0xd4>)
 80008ba:	429c      	cmp	r4, r3
 80008bc:	d101      	bne.n	80008c2 <__swsetup_r+0x46>
 80008be:	68ac      	ldr	r4, [r5, #8]
 80008c0:	e7eb      	b.n	800089a <__swsetup_r+0x1e>
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <__swsetup_r+0xd8>)
 80008c4:	429c      	cmp	r4, r3
 80008c6:	bf08      	it	eq
 80008c8:	68ec      	ldreq	r4, [r5, #12]
 80008ca:	e7e6      	b.n	800089a <__swsetup_r+0x1e>
 80008cc:	0758      	lsls	r0, r3, #29
 80008ce:	d512      	bpl.n	80008f6 <__swsetup_r+0x7a>
 80008d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008d2:	b141      	cbz	r1, 80008e6 <__swsetup_r+0x6a>
 80008d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008d8:	4299      	cmp	r1, r3
 80008da:	d002      	beq.n	80008e2 <__swsetup_r+0x66>
 80008dc:	4630      	mov	r0, r6
 80008de:	f000 fa57 	bl	8000d90 <_free_r>
 80008e2:	2300      	movs	r3, #0
 80008e4:	6363      	str	r3, [r4, #52]	; 0x34
 80008e6:	89a3      	ldrh	r3, [r4, #12]
 80008e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008ec:	81a3      	strh	r3, [r4, #12]
 80008ee:	2300      	movs	r3, #0
 80008f0:	6063      	str	r3, [r4, #4]
 80008f2:	6923      	ldr	r3, [r4, #16]
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	89a3      	ldrh	r3, [r4, #12]
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	81a3      	strh	r3, [r4, #12]
 80008fe:	6923      	ldr	r3, [r4, #16]
 8000900:	b94b      	cbnz	r3, 8000916 <__swsetup_r+0x9a>
 8000902:	89a3      	ldrh	r3, [r4, #12]
 8000904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800090c:	d003      	beq.n	8000916 <__swsetup_r+0x9a>
 800090e:	4621      	mov	r1, r4
 8000910:	4630      	mov	r0, r6
 8000912:	f000 f9fd 	bl	8000d10 <__smakebuf_r>
 8000916:	89a0      	ldrh	r0, [r4, #12]
 8000918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800091c:	f010 0301 	ands.w	r3, r0, #1
 8000920:	d00a      	beq.n	8000938 <__swsetup_r+0xbc>
 8000922:	2300      	movs	r3, #0
 8000924:	60a3      	str	r3, [r4, #8]
 8000926:	6963      	ldr	r3, [r4, #20]
 8000928:	425b      	negs	r3, r3
 800092a:	61a3      	str	r3, [r4, #24]
 800092c:	6923      	ldr	r3, [r4, #16]
 800092e:	b943      	cbnz	r3, 8000942 <__swsetup_r+0xc6>
 8000930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000934:	d1ba      	bne.n	80008ac <__swsetup_r+0x30>
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	0781      	lsls	r1, r0, #30
 800093a:	bf58      	it	pl
 800093c:	6963      	ldrpl	r3, [r4, #20]
 800093e:	60a3      	str	r3, [r4, #8]
 8000940:	e7f4      	b.n	800092c <__swsetup_r+0xb0>
 8000942:	2000      	movs	r0, #0
 8000944:	e7f7      	b.n	8000936 <__swsetup_r+0xba>
 8000946:	bf00      	nop
 8000948:	20000010 	.word	0x20000010
 800094c:	08001680 	.word	0x08001680
 8000950:	080016a0 	.word	0x080016a0
 8000954:	08001660 	.word	0x08001660

08000958 <__sflush_r>:
 8000958:	898a      	ldrh	r2, [r1, #12]
 800095a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800095e:	4605      	mov	r5, r0
 8000960:	0710      	lsls	r0, r2, #28
 8000962:	460c      	mov	r4, r1
 8000964:	d458      	bmi.n	8000a18 <__sflush_r+0xc0>
 8000966:	684b      	ldr	r3, [r1, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	dc05      	bgt.n	8000978 <__sflush_r+0x20>
 800096c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800096e:	2b00      	cmp	r3, #0
 8000970:	dc02      	bgt.n	8000978 <__sflush_r+0x20>
 8000972:	2000      	movs	r0, #0
 8000974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800097a:	2e00      	cmp	r6, #0
 800097c:	d0f9      	beq.n	8000972 <__sflush_r+0x1a>
 800097e:	2300      	movs	r3, #0
 8000980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000984:	682f      	ldr	r7, [r5, #0]
 8000986:	602b      	str	r3, [r5, #0]
 8000988:	d032      	beq.n	80009f0 <__sflush_r+0x98>
 800098a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	075a      	lsls	r2, r3, #29
 8000990:	d505      	bpl.n	800099e <__sflush_r+0x46>
 8000992:	6863      	ldr	r3, [r4, #4]
 8000994:	1ac0      	subs	r0, r0, r3
 8000996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000998:	b10b      	cbz	r3, 800099e <__sflush_r+0x46>
 800099a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800099c:	1ac0      	subs	r0, r0, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	4602      	mov	r2, r0
 80009a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009a4:	6a21      	ldr	r1, [r4, #32]
 80009a6:	4628      	mov	r0, r5
 80009a8:	47b0      	blx	r6
 80009aa:	1c43      	adds	r3, r0, #1
 80009ac:	89a3      	ldrh	r3, [r4, #12]
 80009ae:	d106      	bne.n	80009be <__sflush_r+0x66>
 80009b0:	6829      	ldr	r1, [r5, #0]
 80009b2:	291d      	cmp	r1, #29
 80009b4:	d82c      	bhi.n	8000a10 <__sflush_r+0xb8>
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <__sflush_r+0x108>)
 80009b8:	40ca      	lsrs	r2, r1
 80009ba:	07d6      	lsls	r6, r2, #31
 80009bc:	d528      	bpl.n	8000a10 <__sflush_r+0xb8>
 80009be:	2200      	movs	r2, #0
 80009c0:	6062      	str	r2, [r4, #4]
 80009c2:	04d9      	lsls	r1, r3, #19
 80009c4:	6922      	ldr	r2, [r4, #16]
 80009c6:	6022      	str	r2, [r4, #0]
 80009c8:	d504      	bpl.n	80009d4 <__sflush_r+0x7c>
 80009ca:	1c42      	adds	r2, r0, #1
 80009cc:	d101      	bne.n	80009d2 <__sflush_r+0x7a>
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	b903      	cbnz	r3, 80009d4 <__sflush_r+0x7c>
 80009d2:	6560      	str	r0, [r4, #84]	; 0x54
 80009d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009d6:	602f      	str	r7, [r5, #0]
 80009d8:	2900      	cmp	r1, #0
 80009da:	d0ca      	beq.n	8000972 <__sflush_r+0x1a>
 80009dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009e0:	4299      	cmp	r1, r3
 80009e2:	d002      	beq.n	80009ea <__sflush_r+0x92>
 80009e4:	4628      	mov	r0, r5
 80009e6:	f000 f9d3 	bl	8000d90 <_free_r>
 80009ea:	2000      	movs	r0, #0
 80009ec:	6360      	str	r0, [r4, #52]	; 0x34
 80009ee:	e7c1      	b.n	8000974 <__sflush_r+0x1c>
 80009f0:	6a21      	ldr	r1, [r4, #32]
 80009f2:	2301      	movs	r3, #1
 80009f4:	4628      	mov	r0, r5
 80009f6:	47b0      	blx	r6
 80009f8:	1c41      	adds	r1, r0, #1
 80009fa:	d1c7      	bne.n	800098c <__sflush_r+0x34>
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0c4      	beq.n	800098c <__sflush_r+0x34>
 8000a02:	2b1d      	cmp	r3, #29
 8000a04:	d001      	beq.n	8000a0a <__sflush_r+0xb2>
 8000a06:	2b16      	cmp	r3, #22
 8000a08:	d101      	bne.n	8000a0e <__sflush_r+0xb6>
 8000a0a:	602f      	str	r7, [r5, #0]
 8000a0c:	e7b1      	b.n	8000972 <__sflush_r+0x1a>
 8000a0e:	89a3      	ldrh	r3, [r4, #12]
 8000a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a14:	81a3      	strh	r3, [r4, #12]
 8000a16:	e7ad      	b.n	8000974 <__sflush_r+0x1c>
 8000a18:	690f      	ldr	r7, [r1, #16]
 8000a1a:	2f00      	cmp	r7, #0
 8000a1c:	d0a9      	beq.n	8000972 <__sflush_r+0x1a>
 8000a1e:	0793      	lsls	r3, r2, #30
 8000a20:	680e      	ldr	r6, [r1, #0]
 8000a22:	bf08      	it	eq
 8000a24:	694b      	ldreq	r3, [r1, #20]
 8000a26:	600f      	str	r7, [r1, #0]
 8000a28:	bf18      	it	ne
 8000a2a:	2300      	movne	r3, #0
 8000a2c:	eba6 0807 	sub.w	r8, r6, r7
 8000a30:	608b      	str	r3, [r1, #8]
 8000a32:	f1b8 0f00 	cmp.w	r8, #0
 8000a36:	dd9c      	ble.n	8000972 <__sflush_r+0x1a>
 8000a38:	6a21      	ldr	r1, [r4, #32]
 8000a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	463a      	mov	r2, r7
 8000a40:	4628      	mov	r0, r5
 8000a42:	47b0      	blx	r6
 8000a44:	2800      	cmp	r0, #0
 8000a46:	dc06      	bgt.n	8000a56 <__sflush_r+0xfe>
 8000a48:	89a3      	ldrh	r3, [r4, #12]
 8000a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4e:	81a3      	strh	r3, [r4, #12]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	e78e      	b.n	8000974 <__sflush_r+0x1c>
 8000a56:	4407      	add	r7, r0
 8000a58:	eba8 0800 	sub.w	r8, r8, r0
 8000a5c:	e7e9      	b.n	8000a32 <__sflush_r+0xda>
 8000a5e:	bf00      	nop
 8000a60:	20400001 	.word	0x20400001

08000a64 <_fflush_r>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	690b      	ldr	r3, [r1, #16]
 8000a68:	4605      	mov	r5, r0
 8000a6a:	460c      	mov	r4, r1
 8000a6c:	b913      	cbnz	r3, 8000a74 <_fflush_r+0x10>
 8000a6e:	2500      	movs	r5, #0
 8000a70:	4628      	mov	r0, r5
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	b118      	cbz	r0, 8000a7e <_fflush_r+0x1a>
 8000a76:	6983      	ldr	r3, [r0, #24]
 8000a78:	b90b      	cbnz	r3, 8000a7e <_fflush_r+0x1a>
 8000a7a:	f000 f887 	bl	8000b8c <__sinit>
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <_fflush_r+0x6c>)
 8000a80:	429c      	cmp	r4, r3
 8000a82:	d11b      	bne.n	8000abc <_fflush_r+0x58>
 8000a84:	686c      	ldr	r4, [r5, #4]
 8000a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0ef      	beq.n	8000a6e <_fflush_r+0xa>
 8000a8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a90:	07d0      	lsls	r0, r2, #31
 8000a92:	d404      	bmi.n	8000a9e <_fflush_r+0x3a>
 8000a94:	0599      	lsls	r1, r3, #22
 8000a96:	d402      	bmi.n	8000a9e <_fflush_r+0x3a>
 8000a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a9a:	f7ff fe1c 	bl	80006d6 <__retarget_lock_acquire_recursive>
 8000a9e:	4628      	mov	r0, r5
 8000aa0:	4621      	mov	r1, r4
 8000aa2:	f7ff ff59 	bl	8000958 <__sflush_r>
 8000aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000aa8:	07da      	lsls	r2, r3, #31
 8000aaa:	4605      	mov	r5, r0
 8000aac:	d4e0      	bmi.n	8000a70 <_fflush_r+0xc>
 8000aae:	89a3      	ldrh	r3, [r4, #12]
 8000ab0:	059b      	lsls	r3, r3, #22
 8000ab2:	d4dd      	bmi.n	8000a70 <_fflush_r+0xc>
 8000ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ab6:	f7ff fe0f 	bl	80006d8 <__retarget_lock_release_recursive>
 8000aba:	e7d9      	b.n	8000a70 <_fflush_r+0xc>
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <_fflush_r+0x70>)
 8000abe:	429c      	cmp	r4, r3
 8000ac0:	d101      	bne.n	8000ac6 <_fflush_r+0x62>
 8000ac2:	68ac      	ldr	r4, [r5, #8]
 8000ac4:	e7df      	b.n	8000a86 <_fflush_r+0x22>
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <_fflush_r+0x74>)
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	bf08      	it	eq
 8000acc:	68ec      	ldreq	r4, [r5, #12]
 8000ace:	e7da      	b.n	8000a86 <_fflush_r+0x22>
 8000ad0:	08001680 	.word	0x08001680
 8000ad4:	080016a0 	.word	0x080016a0
 8000ad8:	08001660 	.word	0x08001660

08000adc <std>:
 8000adc:	2300      	movs	r3, #0
 8000ade:	b510      	push	{r4, lr}
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8000ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000aea:	6083      	str	r3, [r0, #8]
 8000aec:	8181      	strh	r1, [r0, #12]
 8000aee:	6643      	str	r3, [r0, #100]	; 0x64
 8000af0:	81c2      	strh	r2, [r0, #14]
 8000af2:	6183      	str	r3, [r0, #24]
 8000af4:	4619      	mov	r1, r3
 8000af6:	2208      	movs	r2, #8
 8000af8:	305c      	adds	r0, #92	; 0x5c
 8000afa:	f7ff fdee 	bl	80006da <memset>
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <std+0x38>)
 8000b00:	6263      	str	r3, [r4, #36]	; 0x24
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <std+0x3c>)
 8000b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <std+0x40>)
 8000b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <std+0x44>)
 8000b0c:	6224      	str	r4, [r4, #32]
 8000b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b10:	bd10      	pop	{r4, pc}
 8000b12:	bf00      	nop
 8000b14:	08000f01 	.word	0x08000f01
 8000b18:	08000f23 	.word	0x08000f23
 8000b1c:	08000f5b 	.word	0x08000f5b
 8000b20:	08000f7f 	.word	0x08000f7f

08000b24 <_cleanup_r>:
 8000b24:	4901      	ldr	r1, [pc, #4]	; (8000b2c <_cleanup_r+0x8>)
 8000b26:	f000 b8af 	b.w	8000c88 <_fwalk_reent>
 8000b2a:	bf00      	nop
 8000b2c:	08000a65 	.word	0x08000a65

08000b30 <__sfmoreglue>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	1e4a      	subs	r2, r1, #1
 8000b34:	2568      	movs	r5, #104	; 0x68
 8000b36:	4355      	muls	r5, r2
 8000b38:	460e      	mov	r6, r1
 8000b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b3e:	f000 f975 	bl	8000e2c <_malloc_r>
 8000b42:	4604      	mov	r4, r0
 8000b44:	b140      	cbz	r0, 8000b58 <__sfmoreglue+0x28>
 8000b46:	2100      	movs	r1, #0
 8000b48:	e9c0 1600 	strd	r1, r6, [r0]
 8000b4c:	300c      	adds	r0, #12
 8000b4e:	60a0      	str	r0, [r4, #8]
 8000b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b54:	f7ff fdc1 	bl	80006da <memset>
 8000b58:	4620      	mov	r0, r4
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}

08000b5c <__sfp_lock_acquire>:
 8000b5c:	4801      	ldr	r0, [pc, #4]	; (8000b64 <__sfp_lock_acquire+0x8>)
 8000b5e:	f7ff bdba 	b.w	80006d6 <__retarget_lock_acquire_recursive>
 8000b62:	bf00      	nop
 8000b64:	2000016c 	.word	0x2000016c

08000b68 <__sfp_lock_release>:
 8000b68:	4801      	ldr	r0, [pc, #4]	; (8000b70 <__sfp_lock_release+0x8>)
 8000b6a:	f7ff bdb5 	b.w	80006d8 <__retarget_lock_release_recursive>
 8000b6e:	bf00      	nop
 8000b70:	2000016c 	.word	0x2000016c

08000b74 <__sinit_lock_acquire>:
 8000b74:	4801      	ldr	r0, [pc, #4]	; (8000b7c <__sinit_lock_acquire+0x8>)
 8000b76:	f7ff bdae 	b.w	80006d6 <__retarget_lock_acquire_recursive>
 8000b7a:	bf00      	nop
 8000b7c:	20000167 	.word	0x20000167

08000b80 <__sinit_lock_release>:
 8000b80:	4801      	ldr	r0, [pc, #4]	; (8000b88 <__sinit_lock_release+0x8>)
 8000b82:	f7ff bda9 	b.w	80006d8 <__retarget_lock_release_recursive>
 8000b86:	bf00      	nop
 8000b88:	20000167 	.word	0x20000167

08000b8c <__sinit>:
 8000b8c:	b510      	push	{r4, lr}
 8000b8e:	4604      	mov	r4, r0
 8000b90:	f7ff fff0 	bl	8000b74 <__sinit_lock_acquire>
 8000b94:	69a3      	ldr	r3, [r4, #24]
 8000b96:	b11b      	cbz	r3, 8000ba0 <__sinit+0x14>
 8000b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b9c:	f7ff bff0 	b.w	8000b80 <__sinit_lock_release>
 8000ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <__sinit+0x68>)
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <__sinit+0x6c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	bf04      	itt	eq
 8000bb2:	2301      	moveq	r3, #1
 8000bb4:	61a3      	streq	r3, [r4, #24]
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f000 f820 	bl	8000bfc <__sfp>
 8000bbc:	6060      	str	r0, [r4, #4]
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f000 f81c 	bl	8000bfc <__sfp>
 8000bc4:	60a0      	str	r0, [r4, #8]
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f000 f818 	bl	8000bfc <__sfp>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60e0      	str	r0, [r4, #12]
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	6860      	ldr	r0, [r4, #4]
 8000bd4:	f7ff ff82 	bl	8000adc <std>
 8000bd8:	68a0      	ldr	r0, [r4, #8]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2109      	movs	r1, #9
 8000bde:	f7ff ff7d 	bl	8000adc <std>
 8000be2:	68e0      	ldr	r0, [r4, #12]
 8000be4:	2202      	movs	r2, #2
 8000be6:	2112      	movs	r1, #18
 8000be8:	f7ff ff78 	bl	8000adc <std>
 8000bec:	2301      	movs	r3, #1
 8000bee:	61a3      	str	r3, [r4, #24]
 8000bf0:	e7d2      	b.n	8000b98 <__sinit+0xc>
 8000bf2:	bf00      	nop
 8000bf4:	0800165c 	.word	0x0800165c
 8000bf8:	08000b25 	.word	0x08000b25

08000bfc <__sfp>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	4607      	mov	r7, r0
 8000c00:	f7ff ffac 	bl	8000b5c <__sfp_lock_acquire>
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <__sfp+0x84>)
 8000c06:	681e      	ldr	r6, [r3, #0]
 8000c08:	69b3      	ldr	r3, [r6, #24]
 8000c0a:	b913      	cbnz	r3, 8000c12 <__sfp+0x16>
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f7ff ffbd 	bl	8000b8c <__sinit>
 8000c12:	3648      	adds	r6, #72	; 0x48
 8000c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	d503      	bpl.n	8000c24 <__sfp+0x28>
 8000c1c:	6833      	ldr	r3, [r6, #0]
 8000c1e:	b30b      	cbz	r3, 8000c64 <__sfp+0x68>
 8000c20:	6836      	ldr	r6, [r6, #0]
 8000c22:	e7f7      	b.n	8000c14 <__sfp+0x18>
 8000c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c28:	b9d5      	cbnz	r5, 8000c60 <__sfp+0x64>
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <__sfp+0x88>)
 8000c2c:	60e3      	str	r3, [r4, #12]
 8000c2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c32:	6665      	str	r5, [r4, #100]	; 0x64
 8000c34:	f7ff fd4e 	bl	80006d4 <__retarget_lock_init_recursive>
 8000c38:	f7ff ff96 	bl	8000b68 <__sfp_lock_release>
 8000c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c44:	6025      	str	r5, [r4, #0]
 8000c46:	61a5      	str	r5, [r4, #24]
 8000c48:	2208      	movs	r2, #8
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c50:	f7ff fd43 	bl	80006da <memset>
 8000c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c60:	3468      	adds	r4, #104	; 0x68
 8000c62:	e7d9      	b.n	8000c18 <__sfp+0x1c>
 8000c64:	2104      	movs	r1, #4
 8000c66:	4638      	mov	r0, r7
 8000c68:	f7ff ff62 	bl	8000b30 <__sfmoreglue>
 8000c6c:	4604      	mov	r4, r0
 8000c6e:	6030      	str	r0, [r6, #0]
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d1d5      	bne.n	8000c20 <__sfp+0x24>
 8000c74:	f7ff ff78 	bl	8000b68 <__sfp_lock_release>
 8000c78:	230c      	movs	r3, #12
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	e7ee      	b.n	8000c5c <__sfp+0x60>
 8000c7e:	bf00      	nop
 8000c80:	0800165c 	.word	0x0800165c
 8000c84:	ffff0001 	.word	0xffff0001

08000c88 <_fwalk_reent>:
 8000c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	4688      	mov	r8, r1
 8000c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c94:	2700      	movs	r7, #0
 8000c96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8000c9e:	d505      	bpl.n	8000cac <_fwalk_reent+0x24>
 8000ca0:	6824      	ldr	r4, [r4, #0]
 8000ca2:	2c00      	cmp	r4, #0
 8000ca4:	d1f7      	bne.n	8000c96 <_fwalk_reent+0xe>
 8000ca6:	4638      	mov	r0, r7
 8000ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cac:	89ab      	ldrh	r3, [r5, #12]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d907      	bls.n	8000cc2 <_fwalk_reent+0x3a>
 8000cb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	d003      	beq.n	8000cc2 <_fwalk_reent+0x3a>
 8000cba:	4629      	mov	r1, r5
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	47c0      	blx	r8
 8000cc0:	4307      	orrs	r7, r0
 8000cc2:	3568      	adds	r5, #104	; 0x68
 8000cc4:	e7e9      	b.n	8000c9a <_fwalk_reent+0x12>

08000cc6 <__swhatbuf_r>:
 8000cc6:	b570      	push	{r4, r5, r6, lr}
 8000cc8:	460e      	mov	r6, r1
 8000cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cce:	2900      	cmp	r1, #0
 8000cd0:	b096      	sub	sp, #88	; 0x58
 8000cd2:	4614      	mov	r4, r2
 8000cd4:	461d      	mov	r5, r3
 8000cd6:	da07      	bge.n	8000ce8 <__swhatbuf_r+0x22>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	602b      	str	r3, [r5, #0]
 8000cdc:	89b3      	ldrh	r3, [r6, #12]
 8000cde:	061a      	lsls	r2, r3, #24
 8000ce0:	d410      	bmi.n	8000d04 <__swhatbuf_r+0x3e>
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	e00e      	b.n	8000d06 <__swhatbuf_r+0x40>
 8000ce8:	466a      	mov	r2, sp
 8000cea:	f000 f96f 	bl	8000fcc <_fstat_r>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	dbf2      	blt.n	8000cd8 <__swhatbuf_r+0x12>
 8000cf2:	9a01      	ldr	r2, [sp, #4]
 8000cf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cfc:	425a      	negs	r2, r3
 8000cfe:	415a      	adcs	r2, r3
 8000d00:	602a      	str	r2, [r5, #0]
 8000d02:	e7ee      	b.n	8000ce2 <__swhatbuf_r+0x1c>
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	2000      	movs	r0, #0
 8000d08:	6023      	str	r3, [r4, #0]
 8000d0a:	b016      	add	sp, #88	; 0x58
 8000d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d10 <__smakebuf_r>:
 8000d10:	898b      	ldrh	r3, [r1, #12]
 8000d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d14:	079d      	lsls	r5, r3, #30
 8000d16:	4606      	mov	r6, r0
 8000d18:	460c      	mov	r4, r1
 8000d1a:	d507      	bpl.n	8000d2c <__smakebuf_r+0x1c>
 8000d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d20:	6023      	str	r3, [r4, #0]
 8000d22:	6123      	str	r3, [r4, #16]
 8000d24:	2301      	movs	r3, #1
 8000d26:	6163      	str	r3, [r4, #20]
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
 8000d2c:	ab01      	add	r3, sp, #4
 8000d2e:	466a      	mov	r2, sp
 8000d30:	f7ff ffc9 	bl	8000cc6 <__swhatbuf_r>
 8000d34:	9900      	ldr	r1, [sp, #0]
 8000d36:	4605      	mov	r5, r0
 8000d38:	4630      	mov	r0, r6
 8000d3a:	f000 f877 	bl	8000e2c <_malloc_r>
 8000d3e:	b948      	cbnz	r0, 8000d54 <__smakebuf_r+0x44>
 8000d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d44:	059a      	lsls	r2, r3, #22
 8000d46:	d4ef      	bmi.n	8000d28 <__smakebuf_r+0x18>
 8000d48:	f023 0303 	bic.w	r3, r3, #3
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	81a3      	strh	r3, [r4, #12]
 8000d52:	e7e3      	b.n	8000d1c <__smakebuf_r+0xc>
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <__smakebuf_r+0x7c>)
 8000d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d58:	89a3      	ldrh	r3, [r4, #12]
 8000d5a:	6020      	str	r0, [r4, #0]
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	81a3      	strh	r3, [r4, #12]
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	6163      	str	r3, [r4, #20]
 8000d66:	9b01      	ldr	r3, [sp, #4]
 8000d68:	6120      	str	r0, [r4, #16]
 8000d6a:	b15b      	cbz	r3, 8000d84 <__smakebuf_r+0x74>
 8000d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d70:	4630      	mov	r0, r6
 8000d72:	f000 f93d 	bl	8000ff0 <_isatty_r>
 8000d76:	b128      	cbz	r0, 8000d84 <__smakebuf_r+0x74>
 8000d78:	89a3      	ldrh	r3, [r4, #12]
 8000d7a:	f023 0303 	bic.w	r3, r3, #3
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	81a3      	strh	r3, [r4, #12]
 8000d84:	89a0      	ldrh	r0, [r4, #12]
 8000d86:	4305      	orrs	r5, r0
 8000d88:	81a5      	strh	r5, [r4, #12]
 8000d8a:	e7cd      	b.n	8000d28 <__smakebuf_r+0x18>
 8000d8c:	08000b25 	.word	0x08000b25

08000d90 <_free_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4605      	mov	r5, r0
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d045      	beq.n	8000e24 <_free_r+0x94>
 8000d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d9c:	1f0c      	subs	r4, r1, #4
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bfb8      	it	lt
 8000da2:	18e4      	addlt	r4, r4, r3
 8000da4:	f000 f946 	bl	8001034 <__malloc_lock>
 8000da8:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <_free_r+0x98>)
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	4610      	mov	r0, r2
 8000dae:	b933      	cbnz	r3, 8000dbe <_free_r+0x2e>
 8000db0:	6063      	str	r3, [r4, #4]
 8000db2:	6014      	str	r4, [r2, #0]
 8000db4:	4628      	mov	r0, r5
 8000db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dba:	f000 b941 	b.w	8001040 <__malloc_unlock>
 8000dbe:	42a3      	cmp	r3, r4
 8000dc0:	d90b      	bls.n	8000dda <_free_r+0x4a>
 8000dc2:	6821      	ldr	r1, [r4, #0]
 8000dc4:	1862      	adds	r2, r4, r1
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	bf04      	itt	eq
 8000dca:	681a      	ldreq	r2, [r3, #0]
 8000dcc:	685b      	ldreq	r3, [r3, #4]
 8000dce:	6063      	str	r3, [r4, #4]
 8000dd0:	bf04      	itt	eq
 8000dd2:	1852      	addeq	r2, r2, r1
 8000dd4:	6022      	streq	r2, [r4, #0]
 8000dd6:	6004      	str	r4, [r0, #0]
 8000dd8:	e7ec      	b.n	8000db4 <_free_r+0x24>
 8000dda:	461a      	mov	r2, r3
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	b10b      	cbz	r3, 8000de4 <_free_r+0x54>
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d9fa      	bls.n	8000dda <_free_r+0x4a>
 8000de4:	6811      	ldr	r1, [r2, #0]
 8000de6:	1850      	adds	r0, r2, r1
 8000de8:	42a0      	cmp	r0, r4
 8000dea:	d10b      	bne.n	8000e04 <_free_r+0x74>
 8000dec:	6820      	ldr	r0, [r4, #0]
 8000dee:	4401      	add	r1, r0
 8000df0:	1850      	adds	r0, r2, r1
 8000df2:	4283      	cmp	r3, r0
 8000df4:	6011      	str	r1, [r2, #0]
 8000df6:	d1dd      	bne.n	8000db4 <_free_r+0x24>
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	6053      	str	r3, [r2, #4]
 8000dfe:	4401      	add	r1, r0
 8000e00:	6011      	str	r1, [r2, #0]
 8000e02:	e7d7      	b.n	8000db4 <_free_r+0x24>
 8000e04:	d902      	bls.n	8000e0c <_free_r+0x7c>
 8000e06:	230c      	movs	r3, #12
 8000e08:	602b      	str	r3, [r5, #0]
 8000e0a:	e7d3      	b.n	8000db4 <_free_r+0x24>
 8000e0c:	6820      	ldr	r0, [r4, #0]
 8000e0e:	1821      	adds	r1, r4, r0
 8000e10:	428b      	cmp	r3, r1
 8000e12:	bf04      	itt	eq
 8000e14:	6819      	ldreq	r1, [r3, #0]
 8000e16:	685b      	ldreq	r3, [r3, #4]
 8000e18:	6063      	str	r3, [r4, #4]
 8000e1a:	bf04      	itt	eq
 8000e1c:	1809      	addeq	r1, r1, r0
 8000e1e:	6021      	streq	r1, [r4, #0]
 8000e20:	6054      	str	r4, [r2, #4]
 8000e22:	e7c7      	b.n	8000db4 <_free_r+0x24>
 8000e24:	bd38      	pop	{r3, r4, r5, pc}
 8000e26:	bf00      	nop
 8000e28:	200000a0 	.word	0x200000a0

08000e2c <_malloc_r>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	1ccd      	adds	r5, r1, #3
 8000e30:	f025 0503 	bic.w	r5, r5, #3
 8000e34:	3508      	adds	r5, #8
 8000e36:	2d0c      	cmp	r5, #12
 8000e38:	bf38      	it	cc
 8000e3a:	250c      	movcc	r5, #12
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	4606      	mov	r6, r0
 8000e40:	db01      	blt.n	8000e46 <_malloc_r+0x1a>
 8000e42:	42a9      	cmp	r1, r5
 8000e44:	d903      	bls.n	8000e4e <_malloc_r+0x22>
 8000e46:	230c      	movs	r3, #12
 8000e48:	6033      	str	r3, [r6, #0]
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e4e:	f000 f8f1 	bl	8001034 <__malloc_lock>
 8000e52:	4921      	ldr	r1, [pc, #132]	; (8000ed8 <_malloc_r+0xac>)
 8000e54:	680a      	ldr	r2, [r1, #0]
 8000e56:	4614      	mov	r4, r2
 8000e58:	b99c      	cbnz	r4, 8000e82 <_malloc_r+0x56>
 8000e5a:	4f20      	ldr	r7, [pc, #128]	; (8000edc <_malloc_r+0xb0>)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b923      	cbnz	r3, 8000e6a <_malloc_r+0x3e>
 8000e60:	4621      	mov	r1, r4
 8000e62:	4630      	mov	r0, r6
 8000e64:	f000 f83c 	bl	8000ee0 <_sbrk_r>
 8000e68:	6038      	str	r0, [r7, #0]
 8000e6a:	4629      	mov	r1, r5
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	f000 f837 	bl	8000ee0 <_sbrk_r>
 8000e72:	1c43      	adds	r3, r0, #1
 8000e74:	d123      	bne.n	8000ebe <_malloc_r+0x92>
 8000e76:	230c      	movs	r3, #12
 8000e78:	6033      	str	r3, [r6, #0]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	f000 f8e0 	bl	8001040 <__malloc_unlock>
 8000e80:	e7e3      	b.n	8000e4a <_malloc_r+0x1e>
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	1b5b      	subs	r3, r3, r5
 8000e86:	d417      	bmi.n	8000eb8 <_malloc_r+0x8c>
 8000e88:	2b0b      	cmp	r3, #11
 8000e8a:	d903      	bls.n	8000e94 <_malloc_r+0x68>
 8000e8c:	6023      	str	r3, [r4, #0]
 8000e8e:	441c      	add	r4, r3
 8000e90:	6025      	str	r5, [r4, #0]
 8000e92:	e004      	b.n	8000e9e <_malloc_r+0x72>
 8000e94:	6863      	ldr	r3, [r4, #4]
 8000e96:	42a2      	cmp	r2, r4
 8000e98:	bf0c      	ite	eq
 8000e9a:	600b      	streq	r3, [r1, #0]
 8000e9c:	6053      	strne	r3, [r2, #4]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f000 f8ce 	bl	8001040 <__malloc_unlock>
 8000ea4:	f104 000b 	add.w	r0, r4, #11
 8000ea8:	1d23      	adds	r3, r4, #4
 8000eaa:	f020 0007 	bic.w	r0, r0, #7
 8000eae:	1ac2      	subs	r2, r0, r3
 8000eb0:	d0cc      	beq.n	8000e4c <_malloc_r+0x20>
 8000eb2:	1a1b      	subs	r3, r3, r0
 8000eb4:	50a3      	str	r3, [r4, r2]
 8000eb6:	e7c9      	b.n	8000e4c <_malloc_r+0x20>
 8000eb8:	4622      	mov	r2, r4
 8000eba:	6864      	ldr	r4, [r4, #4]
 8000ebc:	e7cc      	b.n	8000e58 <_malloc_r+0x2c>
 8000ebe:	1cc4      	adds	r4, r0, #3
 8000ec0:	f024 0403 	bic.w	r4, r4, #3
 8000ec4:	42a0      	cmp	r0, r4
 8000ec6:	d0e3      	beq.n	8000e90 <_malloc_r+0x64>
 8000ec8:	1a21      	subs	r1, r4, r0
 8000eca:	4630      	mov	r0, r6
 8000ecc:	f000 f808 	bl	8000ee0 <_sbrk_r>
 8000ed0:	3001      	adds	r0, #1
 8000ed2:	d1dd      	bne.n	8000e90 <_malloc_r+0x64>
 8000ed4:	e7cf      	b.n	8000e76 <_malloc_r+0x4a>
 8000ed6:	bf00      	nop
 8000ed8:	200000a0 	.word	0x200000a0
 8000edc:	200000a4 	.word	0x200000a4

08000ee0 <_sbrk_r>:
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4d06      	ldr	r5, [pc, #24]	; (8000efc <_sbrk_r+0x1c>)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	602b      	str	r3, [r5, #0]
 8000eec:	f7ff fafa 	bl	80004e4 <_sbrk>
 8000ef0:	1c43      	adds	r3, r0, #1
 8000ef2:	d102      	bne.n	8000efa <_sbrk_r+0x1a>
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	b103      	cbz	r3, 8000efa <_sbrk_r+0x1a>
 8000ef8:	6023      	str	r3, [r4, #0]
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	20000170 	.word	0x20000170

08000f00 <__sread>:
 8000f00:	b510      	push	{r4, lr}
 8000f02:	460c      	mov	r4, r1
 8000f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f08:	f000 f8a0 	bl	800104c <_read_r>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	bfab      	itete	ge
 8000f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f12:	89a3      	ldrhlt	r3, [r4, #12]
 8000f14:	181b      	addge	r3, r3, r0
 8000f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f1a:	bfac      	ite	ge
 8000f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f1e:	81a3      	strhlt	r3, [r4, #12]
 8000f20:	bd10      	pop	{r4, pc}

08000f22 <__swrite>:
 8000f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f26:	461f      	mov	r7, r3
 8000f28:	898b      	ldrh	r3, [r1, #12]
 8000f2a:	05db      	lsls	r3, r3, #23
 8000f2c:	4605      	mov	r5, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	4616      	mov	r6, r2
 8000f32:	d505      	bpl.n	8000f40 <__swrite+0x1e>
 8000f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f000 f868 	bl	8001010 <_lseek_r>
 8000f40:	89a3      	ldrh	r3, [r4, #12]
 8000f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f4a:	81a3      	strh	r3, [r4, #12]
 8000f4c:	4632      	mov	r2, r6
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4628      	mov	r0, r5
 8000f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f56:	f000 b817 	b.w	8000f88 <_write_r>

08000f5a <__sseek>:
 8000f5a:	b510      	push	{r4, lr}
 8000f5c:	460c      	mov	r4, r1
 8000f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f62:	f000 f855 	bl	8001010 <_lseek_r>
 8000f66:	1c43      	adds	r3, r0, #1
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	bf15      	itete	ne
 8000f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f76:	81a3      	strheq	r3, [r4, #12]
 8000f78:	bf18      	it	ne
 8000f7a:	81a3      	strhne	r3, [r4, #12]
 8000f7c:	bd10      	pop	{r4, pc}

08000f7e <__sclose>:
 8000f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f82:	f000 b813 	b.w	8000fac <_close_r>
	...

08000f88 <_write_r>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4d07      	ldr	r5, [pc, #28]	; (8000fa8 <_write_r+0x20>)
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4611      	mov	r1, r2
 8000f92:	2200      	movs	r2, #0
 8000f94:	602a      	str	r2, [r5, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f000 f91a 	bl	80011d0 <_write>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_write_r+0x1e>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_write_r+0x1e>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	20000170 	.word	0x20000170

08000fac <_close_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4d06      	ldr	r5, [pc, #24]	; (8000fc8 <_close_r+0x1c>)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	602b      	str	r3, [r5, #0]
 8000fb8:	f000 f938 	bl	800122c <_close>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	d102      	bne.n	8000fc6 <_close_r+0x1a>
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	b103      	cbz	r3, 8000fc6 <_close_r+0x1a>
 8000fc4:	6023      	str	r3, [r4, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
 8000fc8:	20000170 	.word	0x20000170

08000fcc <_fstat_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4d07      	ldr	r5, [pc, #28]	; (8000fec <_fstat_r+0x20>)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	602b      	str	r3, [r5, #0]
 8000fda:	f000 f96e 	bl	80012ba <_fstat>
 8000fde:	1c43      	adds	r3, r0, #1
 8000fe0:	d102      	bne.n	8000fe8 <_fstat_r+0x1c>
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	b103      	cbz	r3, 8000fe8 <_fstat_r+0x1c>
 8000fe6:	6023      	str	r3, [r4, #0]
 8000fe8:	bd38      	pop	{r3, r4, r5, pc}
 8000fea:	bf00      	nop
 8000fec:	20000170 	.word	0x20000170

08000ff0 <_isatty_r>:
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4d06      	ldr	r5, [pc, #24]	; (800100c <_isatty_r+0x1c>)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	f000 fac2 	bl	8001584 <_isatty>
 8001000:	1c43      	adds	r3, r0, #1
 8001002:	d102      	bne.n	800100a <_isatty_r+0x1a>
 8001004:	682b      	ldr	r3, [r5, #0]
 8001006:	b103      	cbz	r3, 800100a <_isatty_r+0x1a>
 8001008:	6023      	str	r3, [r4, #0]
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	20000170 	.word	0x20000170

08001010 <_lseek_r>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4d07      	ldr	r5, [pc, #28]	; (8001030 <_lseek_r+0x20>)
 8001014:	4604      	mov	r4, r0
 8001016:	4608      	mov	r0, r1
 8001018:	4611      	mov	r1, r2
 800101a:	2200      	movs	r2, #0
 800101c:	602a      	str	r2, [r5, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	f000 f8c4 	bl	80011ac <_lseek>
 8001024:	1c43      	adds	r3, r0, #1
 8001026:	d102      	bne.n	800102e <_lseek_r+0x1e>
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	b103      	cbz	r3, 800102e <_lseek_r+0x1e>
 800102c:	6023      	str	r3, [r4, #0]
 800102e:	bd38      	pop	{r3, r4, r5, pc}
 8001030:	20000170 	.word	0x20000170

08001034 <__malloc_lock>:
 8001034:	4801      	ldr	r0, [pc, #4]	; (800103c <__malloc_lock+0x8>)
 8001036:	f7ff bb4e 	b.w	80006d6 <__retarget_lock_acquire_recursive>
 800103a:	bf00      	nop
 800103c:	20000168 	.word	0x20000168

08001040 <__malloc_unlock>:
 8001040:	4801      	ldr	r0, [pc, #4]	; (8001048 <__malloc_unlock+0x8>)
 8001042:	f7ff bb49 	b.w	80006d8 <__retarget_lock_release_recursive>
 8001046:	bf00      	nop
 8001048:	20000168 	.word	0x20000168

0800104c <_read_r>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	4d07      	ldr	r5, [pc, #28]	; (800106c <_read_r+0x20>)
 8001050:	4604      	mov	r4, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4611      	mov	r1, r2
 8001056:	2200      	movs	r2, #0
 8001058:	602a      	str	r2, [r5, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	f000 f850 	bl	8001100 <_read>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d102      	bne.n	800106a <_read_r+0x1e>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	b103      	cbz	r3, 800106a <_read_r+0x1e>
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	20000170 	.word	0x20000170

08001070 <findslot>:
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <findslot+0x2c>)
 8001072:	b510      	push	{r4, lr}
 8001074:	4604      	mov	r4, r0
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	b118      	cbz	r0, 8001082 <findslot+0x12>
 800107a:	6983      	ldr	r3, [r0, #24]
 800107c:	b90b      	cbnz	r3, 8001082 <findslot+0x12>
 800107e:	f7ff fd85 	bl	8000b8c <__sinit>
 8001082:	2c13      	cmp	r4, #19
 8001084:	d807      	bhi.n	8001096 <findslot+0x26>
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <findslot+0x30>)
 8001088:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800108c:	3201      	adds	r2, #1
 800108e:	d002      	beq.n	8001096 <findslot+0x26>
 8001090:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001094:	bd10      	pop	{r4, pc}
 8001096:	2000      	movs	r0, #0
 8001098:	e7fc      	b.n	8001094 <findslot+0x24>
 800109a:	bf00      	nop
 800109c:	20000010 	.word	0x20000010
 80010a0:	200000b4 	.word	0x200000b4

080010a4 <checkerror>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	1c43      	adds	r3, r0, #1
 80010a8:	4604      	mov	r4, r0
 80010aa:	d109      	bne.n	80010c0 <checkerror+0x1c>
 80010ac:	f7ff fa7a 	bl	80005a4 <__errno>
 80010b0:	2613      	movs	r6, #19
 80010b2:	4605      	mov	r5, r0
 80010b4:	2700      	movs	r7, #0
 80010b6:	4630      	mov	r0, r6
 80010b8:	4639      	mov	r1, r7
 80010ba:	beab      	bkpt	0x00ab
 80010bc:	4606      	mov	r6, r0
 80010be:	602e      	str	r6, [r5, #0]
 80010c0:	4620      	mov	r0, r4
 80010c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010c4 <error>:
 80010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c6:	4604      	mov	r4, r0
 80010c8:	f7ff fa6c 	bl	80005a4 <__errno>
 80010cc:	2613      	movs	r6, #19
 80010ce:	4605      	mov	r5, r0
 80010d0:	2700      	movs	r7, #0
 80010d2:	4630      	mov	r0, r6
 80010d4:	4639      	mov	r1, r7
 80010d6:	beab      	bkpt	0x00ab
 80010d8:	4606      	mov	r6, r0
 80010da:	602e      	str	r6, [r5, #0]
 80010dc:	4620      	mov	r0, r4
 80010de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010e0 <_swiread>:
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80010e8:	9203      	str	r2, [sp, #12]
 80010ea:	2406      	movs	r4, #6
 80010ec:	ad01      	add	r5, sp, #4
 80010ee:	4620      	mov	r0, r4
 80010f0:	4629      	mov	r1, r5
 80010f2:	beab      	bkpt	0x00ab
 80010f4:	4604      	mov	r4, r0
 80010f6:	4620      	mov	r0, r4
 80010f8:	f7ff ffd4 	bl	80010a4 <checkerror>
 80010fc:	b005      	add	sp, #20
 80010fe:	bd30      	pop	{r4, r5, pc}

08001100 <_read>:
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	460e      	mov	r6, r1
 8001104:	4615      	mov	r5, r2
 8001106:	f7ff ffb3 	bl	8001070 <findslot>
 800110a:	4604      	mov	r4, r0
 800110c:	b930      	cbnz	r0, 800111c <_read+0x1c>
 800110e:	f7ff fa49 	bl	80005a4 <__errno>
 8001112:	2309      	movs	r3, #9
 8001114:	6003      	str	r3, [r0, #0]
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	bd70      	pop	{r4, r5, r6, pc}
 800111c:	6800      	ldr	r0, [r0, #0]
 800111e:	462a      	mov	r2, r5
 8001120:	4631      	mov	r1, r6
 8001122:	f7ff ffdd 	bl	80010e0 <_swiread>
 8001126:	1c43      	adds	r3, r0, #1
 8001128:	bf1f      	itttt	ne
 800112a:	6863      	ldrne	r3, [r4, #4]
 800112c:	1a28      	subne	r0, r5, r0
 800112e:	181b      	addne	r3, r3, r0
 8001130:	6063      	strne	r3, [r4, #4]
 8001132:	e7f2      	b.n	800111a <_read+0x1a>

08001134 <_swilseek>:
 8001134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001136:	460c      	mov	r4, r1
 8001138:	4616      	mov	r6, r2
 800113a:	f7ff ff99 	bl	8001070 <findslot>
 800113e:	4605      	mov	r5, r0
 8001140:	b940      	cbnz	r0, 8001154 <_swilseek+0x20>
 8001142:	f7ff fa2f 	bl	80005a4 <__errno>
 8001146:	2309      	movs	r3, #9
 8001148:	6003      	str	r3, [r0, #0]
 800114a:	f04f 34ff 	mov.w	r4, #4294967295
 800114e:	4620      	mov	r0, r4
 8001150:	b003      	add	sp, #12
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001154:	2e02      	cmp	r6, #2
 8001156:	d903      	bls.n	8001160 <_swilseek+0x2c>
 8001158:	f7ff fa24 	bl	80005a4 <__errno>
 800115c:	2316      	movs	r3, #22
 800115e:	e7f3      	b.n	8001148 <_swilseek+0x14>
 8001160:	2e01      	cmp	r6, #1
 8001162:	d112      	bne.n	800118a <_swilseek+0x56>
 8001164:	6843      	ldr	r3, [r0, #4]
 8001166:	18e4      	adds	r4, r4, r3
 8001168:	d4f6      	bmi.n	8001158 <_swilseek+0x24>
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	260a      	movs	r6, #10
 800116e:	e9cd 3400 	strd	r3, r4, [sp]
 8001172:	466f      	mov	r7, sp
 8001174:	4630      	mov	r0, r6
 8001176:	4639      	mov	r1, r7
 8001178:	beab      	bkpt	0x00ab
 800117a:	4606      	mov	r6, r0
 800117c:	4630      	mov	r0, r6
 800117e:	f7ff ff91 	bl	80010a4 <checkerror>
 8001182:	2800      	cmp	r0, #0
 8001184:	dbe1      	blt.n	800114a <_swilseek+0x16>
 8001186:	606c      	str	r4, [r5, #4]
 8001188:	e7e1      	b.n	800114e <_swilseek+0x1a>
 800118a:	2e02      	cmp	r6, #2
 800118c:	d1ed      	bne.n	800116a <_swilseek+0x36>
 800118e:	6803      	ldr	r3, [r0, #0]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	260c      	movs	r6, #12
 8001194:	466f      	mov	r7, sp
 8001196:	4630      	mov	r0, r6
 8001198:	4639      	mov	r1, r7
 800119a:	beab      	bkpt	0x00ab
 800119c:	4606      	mov	r6, r0
 800119e:	4630      	mov	r0, r6
 80011a0:	f7ff ff80 	bl	80010a4 <checkerror>
 80011a4:	1c43      	adds	r3, r0, #1
 80011a6:	d0d0      	beq.n	800114a <_swilseek+0x16>
 80011a8:	4404      	add	r4, r0
 80011aa:	e7de      	b.n	800116a <_swilseek+0x36>

080011ac <_lseek>:
 80011ac:	f7ff bfc2 	b.w	8001134 <_swilseek>

080011b0 <_swiwrite>:
 80011b0:	b530      	push	{r4, r5, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80011b8:	9203      	str	r2, [sp, #12]
 80011ba:	2405      	movs	r4, #5
 80011bc:	ad01      	add	r5, sp, #4
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	beab      	bkpt	0x00ab
 80011c4:	4604      	mov	r4, r0
 80011c6:	4620      	mov	r0, r4
 80011c8:	f7ff ff6c 	bl	80010a4 <checkerror>
 80011cc:	b005      	add	sp, #20
 80011ce:	bd30      	pop	{r4, r5, pc}

080011d0 <_write>:
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	460e      	mov	r6, r1
 80011d4:	4615      	mov	r5, r2
 80011d6:	f7ff ff4b 	bl	8001070 <findslot>
 80011da:	4604      	mov	r4, r0
 80011dc:	b930      	cbnz	r0, 80011ec <_write+0x1c>
 80011de:	f7ff f9e1 	bl	80005a4 <__errno>
 80011e2:	2309      	movs	r3, #9
 80011e4:	6003      	str	r3, [r0, #0]
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
 80011ec:	6800      	ldr	r0, [r0, #0]
 80011ee:	462a      	mov	r2, r5
 80011f0:	4631      	mov	r1, r6
 80011f2:	f7ff ffdd 	bl	80011b0 <_swiwrite>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	dbf5      	blt.n	80011e6 <_write+0x16>
 80011fa:	6862      	ldr	r2, [r4, #4]
 80011fc:	1ae8      	subs	r0, r5, r3
 80011fe:	4402      	add	r2, r0
 8001200:	42ab      	cmp	r3, r5
 8001202:	6062      	str	r2, [r4, #4]
 8001204:	d1f1      	bne.n	80011ea <_write+0x1a>
 8001206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff bf5a 	b.w	80010c4 <error>

08001210 <_swiclose>:
 8001210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001212:	2402      	movs	r4, #2
 8001214:	9001      	str	r0, [sp, #4]
 8001216:	ad01      	add	r5, sp, #4
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	beab      	bkpt	0x00ab
 800121e:	4604      	mov	r4, r0
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff ff3f 	bl	80010a4 <checkerror>
 8001226:	b003      	add	sp, #12
 8001228:	bd30      	pop	{r4, r5, pc}
	...

0800122c <_close>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	4605      	mov	r5, r0
 8001230:	f7ff ff1e 	bl	8001070 <findslot>
 8001234:	4604      	mov	r4, r0
 8001236:	b930      	cbnz	r0, 8001246 <_close+0x1a>
 8001238:	f7ff f9b4 	bl	80005a4 <__errno>
 800123c:	2309      	movs	r3, #9
 800123e:	6003      	str	r3, [r0, #0]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	3d01      	subs	r5, #1
 8001248:	2d01      	cmp	r5, #1
 800124a:	d809      	bhi.n	8001260 <_close+0x34>
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <_close+0x48>)
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	429a      	cmp	r2, r3
 8001254:	d104      	bne.n	8001260 <_close+0x34>
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	6003      	str	r3, [r0, #0]
 800125c:	2000      	movs	r0, #0
 800125e:	e7f1      	b.n	8001244 <_close+0x18>
 8001260:	6820      	ldr	r0, [r4, #0]
 8001262:	f7ff ffd5 	bl	8001210 <_swiclose>
 8001266:	2800      	cmp	r0, #0
 8001268:	d1ec      	bne.n	8001244 <_close+0x18>
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	6023      	str	r3, [r4, #0]
 8001270:	e7e8      	b.n	8001244 <_close+0x18>
 8001272:	bf00      	nop
 8001274:	200000b4 	.word	0x200000b4

08001278 <_swistat>:
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	460c      	mov	r4, r1
 800127c:	f7ff fef8 	bl	8001070 <findslot>
 8001280:	4605      	mov	r5, r0
 8001282:	b930      	cbnz	r0, 8001292 <_swistat+0x1a>
 8001284:	f7ff f98e 	bl	80005a4 <__errno>
 8001288:	2309      	movs	r3, #9
 800128a:	6003      	str	r3, [r0, #0]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	bd70      	pop	{r4, r5, r6, pc}
 8001292:	6863      	ldr	r3, [r4, #4]
 8001294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001298:	6063      	str	r3, [r4, #4]
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	64a3      	str	r3, [r4, #72]	; 0x48
 80012a0:	260c      	movs	r6, #12
 80012a2:	4630      	mov	r0, r6
 80012a4:	4629      	mov	r1, r5
 80012a6:	beab      	bkpt	0x00ab
 80012a8:	4605      	mov	r5, r0
 80012aa:	4628      	mov	r0, r5
 80012ac:	f7ff fefa 	bl	80010a4 <checkerror>
 80012b0:	1c43      	adds	r3, r0, #1
 80012b2:	bf1c      	itt	ne
 80012b4:	6120      	strne	r0, [r4, #16]
 80012b6:	2000      	movne	r0, #0
 80012b8:	e7ea      	b.n	8001290 <_swistat+0x18>

080012ba <_fstat>:
 80012ba:	460b      	mov	r3, r1
 80012bc:	b510      	push	{r4, lr}
 80012be:	2100      	movs	r1, #0
 80012c0:	4604      	mov	r4, r0
 80012c2:	2258      	movs	r2, #88	; 0x58
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fa08 	bl	80006da <memset>
 80012ca:	4601      	mov	r1, r0
 80012cc:	4620      	mov	r0, r4
 80012ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012d2:	f7ff bfd1 	b.w	8001278 <_swistat>

080012d6 <_stat>:
 80012d6:	b538      	push	{r3, r4, r5, lr}
 80012d8:	460d      	mov	r5, r1
 80012da:	4604      	mov	r4, r0
 80012dc:	2258      	movs	r2, #88	; 0x58
 80012de:	2100      	movs	r1, #0
 80012e0:	4628      	mov	r0, r5
 80012e2:	f7ff f9fa 	bl	80006da <memset>
 80012e6:	4620      	mov	r0, r4
 80012e8:	2100      	movs	r1, #0
 80012ea:	f000 f811 	bl	8001310 <_swiopen>
 80012ee:	1c43      	adds	r3, r0, #1
 80012f0:	4604      	mov	r4, r0
 80012f2:	d00b      	beq.n	800130c <_stat+0x36>
 80012f4:	686b      	ldr	r3, [r5, #4]
 80012f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80012fa:	606b      	str	r3, [r5, #4]
 80012fc:	4629      	mov	r1, r5
 80012fe:	f7ff ffbb 	bl	8001278 <_swistat>
 8001302:	4605      	mov	r5, r0
 8001304:	4620      	mov	r0, r4
 8001306:	f7ff ff91 	bl	800122c <_close>
 800130a:	462c      	mov	r4, r5
 800130c:	4620      	mov	r0, r4
 800130e:	bd38      	pop	{r3, r4, r5, pc}

08001310 <_swiopen>:
 8001310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <_swiopen+0xb0>)
 8001316:	b097      	sub	sp, #92	; 0x5c
 8001318:	4681      	mov	r9, r0
 800131a:	460f      	mov	r7, r1
 800131c:	2500      	movs	r5, #0
 800131e:	461e      	mov	r6, r3
 8001320:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001324:	1c61      	adds	r1, r4, #1
 8001326:	d037      	beq.n	8001398 <_swiopen+0x88>
 8001328:	3501      	adds	r5, #1
 800132a:	2d14      	cmp	r5, #20
 800132c:	d1f8      	bne.n	8001320 <_swiopen+0x10>
 800132e:	f7ff f939 	bl	80005a4 <__errno>
 8001332:	2318      	movs	r3, #24
 8001334:	6003      	str	r3, [r0, #0]
 8001336:	f04f 34ff 	mov.w	r4, #4294967295
 800133a:	e03d      	b.n	80013b8 <_swiopen+0xa8>
 800133c:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8001340:	f240 6301 	movw	r3, #1537	; 0x601
 8001344:	07ba      	lsls	r2, r7, #30
 8001346:	bf48      	it	mi
 8001348:	f044 0402 	orrmi.w	r4, r4, #2
 800134c:	421f      	tst	r7, r3
 800134e:	bf18      	it	ne
 8001350:	f044 0404 	orrne.w	r4, r4, #4
 8001354:	073b      	lsls	r3, r7, #28
 8001356:	bf48      	it	mi
 8001358:	f024 0404 	bicmi.w	r4, r4, #4
 800135c:	4648      	mov	r0, r9
 800135e:	bf48      	it	mi
 8001360:	f044 0408 	orrmi.w	r4, r4, #8
 8001364:	f8cd 9000 	str.w	r9, [sp]
 8001368:	f7fe ff40 	bl	80001ec <strlen>
 800136c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001370:	2401      	movs	r4, #1
 8001372:	4620      	mov	r0, r4
 8001374:	4641      	mov	r1, r8
 8001376:	beab      	bkpt	0x00ab
 8001378:	4604      	mov	r4, r0
 800137a:	2c00      	cmp	r4, #0
 800137c:	db07      	blt.n	800138e <_swiopen+0x7e>
 800137e:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8001382:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8001386:	2300      	movs	r3, #0
 8001388:	6073      	str	r3, [r6, #4]
 800138a:	462c      	mov	r4, r5
 800138c:	e014      	b.n	80013b8 <_swiopen+0xa8>
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff fe98 	bl	80010c4 <error>
 8001394:	4604      	mov	r4, r0
 8001396:	e00f      	b.n	80013b8 <_swiopen+0xa8>
 8001398:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 800139c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80013a0:	46e8      	mov	r8, sp
 80013a2:	d1cb      	bne.n	800133c <_swiopen+0x2c>
 80013a4:	4641      	mov	r1, r8
 80013a6:	4648      	mov	r0, r9
 80013a8:	f7ff ff95 	bl	80012d6 <_stat>
 80013ac:	3001      	adds	r0, #1
 80013ae:	d0c5      	beq.n	800133c <_swiopen+0x2c>
 80013b0:	f7ff f8f8 	bl	80005a4 <__errno>
 80013b4:	2311      	movs	r3, #17
 80013b6:	6003      	str	r3, [r0, #0]
 80013b8:	4620      	mov	r0, r4
 80013ba:	b017      	add	sp, #92	; 0x5c
 80013bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013c0:	200000b4 	.word	0x200000b4

080013c4 <_get_semihosting_exts>:
 80013c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013c8:	4606      	mov	r6, r0
 80013ca:	460f      	mov	r7, r1
 80013cc:	482a      	ldr	r0, [pc, #168]	; (8001478 <_get_semihosting_exts+0xb4>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	4615      	mov	r5, r2
 80013d2:	f7ff ff9d 	bl	8001310 <_swiopen>
 80013d6:	462a      	mov	r2, r5
 80013d8:	4604      	mov	r4, r0
 80013da:	2100      	movs	r1, #0
 80013dc:	4630      	mov	r0, r6
 80013de:	f7ff f97c 	bl	80006da <memset>
 80013e2:	1c63      	adds	r3, r4, #1
 80013e4:	d016      	beq.n	8001414 <_get_semihosting_exts+0x50>
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fe42 	bl	8001070 <findslot>
 80013ec:	f04f 080c 	mov.w	r8, #12
 80013f0:	4681      	mov	r9, r0
 80013f2:	4640      	mov	r0, r8
 80013f4:	4649      	mov	r1, r9
 80013f6:	beab      	bkpt	0x00ab
 80013f8:	4680      	mov	r8, r0
 80013fa:	4640      	mov	r0, r8
 80013fc:	f7ff fe52 	bl	80010a4 <checkerror>
 8001400:	2803      	cmp	r0, #3
 8001402:	dd02      	ble.n	800140a <_get_semihosting_exts+0x46>
 8001404:	1ec3      	subs	r3, r0, #3
 8001406:	42ab      	cmp	r3, r5
 8001408:	dc08      	bgt.n	800141c <_get_semihosting_exts+0x58>
 800140a:	4620      	mov	r0, r4
 800140c:	f7ff ff0e 	bl	800122c <_close>
 8001410:	f04f 34ff 	mov.w	r4, #4294967295
 8001414:	4620      	mov	r0, r4
 8001416:	b003      	add	sp, #12
 8001418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800141c:	2204      	movs	r2, #4
 800141e:	eb0d 0102 	add.w	r1, sp, r2
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff fe6c 	bl	8001100 <_read>
 8001428:	2803      	cmp	r0, #3
 800142a:	ddee      	ble.n	800140a <_get_semihosting_exts+0x46>
 800142c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001430:	2b53      	cmp	r3, #83	; 0x53
 8001432:	d1ea      	bne.n	800140a <_get_semihosting_exts+0x46>
 8001434:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001438:	2b48      	cmp	r3, #72	; 0x48
 800143a:	d1e6      	bne.n	800140a <_get_semihosting_exts+0x46>
 800143c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001440:	2b46      	cmp	r3, #70	; 0x46
 8001442:	d1e2      	bne.n	800140a <_get_semihosting_exts+0x46>
 8001444:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001448:	2b42      	cmp	r3, #66	; 0x42
 800144a:	d1de      	bne.n	800140a <_get_semihosting_exts+0x46>
 800144c:	2201      	movs	r2, #1
 800144e:	4639      	mov	r1, r7
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff fe6f 	bl	8001134 <_swilseek>
 8001456:	2800      	cmp	r0, #0
 8001458:	dbd7      	blt.n	800140a <_get_semihosting_exts+0x46>
 800145a:	462a      	mov	r2, r5
 800145c:	4631      	mov	r1, r6
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff fe4e 	bl	8001100 <_read>
 8001464:	4605      	mov	r5, r0
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fee0 	bl	800122c <_close>
 800146c:	4628      	mov	r0, r5
 800146e:	f7ff fe19 	bl	80010a4 <checkerror>
 8001472:	4604      	mov	r4, r0
 8001474:	e7ce      	b.n	8001414 <_get_semihosting_exts+0x50>
 8001476:	bf00      	nop
 8001478:	080016c0 	.word	0x080016c0

0800147c <initialise_semihosting_exts>:
 800147c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800147e:	4d0a      	ldr	r5, [pc, #40]	; (80014a8 <initialise_semihosting_exts+0x2c>)
 8001480:	4c0a      	ldr	r4, [pc, #40]	; (80014ac <initialise_semihosting_exts+0x30>)
 8001482:	2100      	movs	r1, #0
 8001484:	2201      	movs	r2, #1
 8001486:	a801      	add	r0, sp, #4
 8001488:	6029      	str	r1, [r5, #0]
 800148a:	6022      	str	r2, [r4, #0]
 800148c:	f7ff ff9a 	bl	80013c4 <_get_semihosting_exts>
 8001490:	2800      	cmp	r0, #0
 8001492:	dd07      	ble.n	80014a4 <initialise_semihosting_exts+0x28>
 8001494:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001498:	f003 0201 	and.w	r2, r3, #1
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	602a      	str	r2, [r5, #0]
 80014a2:	6023      	str	r3, [r4, #0]
 80014a4:	b003      	add	sp, #12
 80014a6:	bd30      	pop	{r4, r5, pc}
 80014a8:	20000074 	.word	0x20000074
 80014ac:	20000078 	.word	0x20000078

080014b0 <_has_ext_stdout_stderr>:
 80014b0:	b510      	push	{r4, lr}
 80014b2:	4c04      	ldr	r4, [pc, #16]	; (80014c4 <_has_ext_stdout_stderr+0x14>)
 80014b4:	6822      	ldr	r2, [r4, #0]
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	da01      	bge.n	80014be <_has_ext_stdout_stderr+0xe>
 80014ba:	f7ff ffdf 	bl	800147c <initialise_semihosting_exts>
 80014be:	6820      	ldr	r0, [r4, #0]
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	bf00      	nop
 80014c4:	20000078 	.word	0x20000078

080014c8 <initialise_monitor_handles>:
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014cc:	b085      	sub	sp, #20
 80014ce:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001580 <initialise_monitor_handles+0xb8>
 80014d2:	f8cd 9004 	str.w	r9, [sp, #4]
 80014d6:	2303      	movs	r3, #3
 80014d8:	2400      	movs	r4, #0
 80014da:	9303      	str	r3, [sp, #12]
 80014dc:	f10d 0804 	add.w	r8, sp, #4
 80014e0:	9402      	str	r4, [sp, #8]
 80014e2:	2501      	movs	r5, #1
 80014e4:	4628      	mov	r0, r5
 80014e6:	4641      	mov	r1, r8
 80014e8:	beab      	bkpt	0x00ab
 80014ea:	4605      	mov	r5, r0
 80014ec:	4e20      	ldr	r6, [pc, #128]	; (8001570 <initialise_monitor_handles+0xa8>)
 80014ee:	4a21      	ldr	r2, [pc, #132]	; (8001574 <initialise_monitor_handles+0xac>)
 80014f0:	6035      	str	r5, [r6, #0]
 80014f2:	4623      	mov	r3, r4
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	4614      	mov	r4, r2
 80014fa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80014fe:	3301      	adds	r3, #1
 8001500:	2b14      	cmp	r3, #20
 8001502:	d1fa      	bne.n	80014fa <initialise_monitor_handles+0x32>
 8001504:	f7ff ffd4 	bl	80014b0 <_has_ext_stdout_stderr>
 8001508:	4d1b      	ldr	r5, [pc, #108]	; (8001578 <initialise_monitor_handles+0xb0>)
 800150a:	b1d0      	cbz	r0, 8001542 <initialise_monitor_handles+0x7a>
 800150c:	f04f 0a03 	mov.w	sl, #3
 8001510:	2304      	movs	r3, #4
 8001512:	f8cd 9004 	str.w	r9, [sp, #4]
 8001516:	2701      	movs	r7, #1
 8001518:	f8cd a00c 	str.w	sl, [sp, #12]
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	4638      	mov	r0, r7
 8001520:	4641      	mov	r1, r8
 8001522:	beab      	bkpt	0x00ab
 8001524:	4683      	mov	fp, r0
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <initialise_monitor_handles+0xb4>)
 8001528:	f8cd 9004 	str.w	r9, [sp, #4]
 800152c:	f8c3 b000 	str.w	fp, [r3]
 8001530:	2308      	movs	r3, #8
 8001532:	f8cd a00c 	str.w	sl, [sp, #12]
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	4638      	mov	r0, r7
 800153a:	4641      	mov	r1, r8
 800153c:	beab      	bkpt	0x00ab
 800153e:	4607      	mov	r7, r0
 8001540:	602f      	str	r7, [r5, #0]
 8001542:	682b      	ldr	r3, [r5, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	bf02      	ittt	eq
 8001548:	4b0c      	ldreq	r3, [pc, #48]	; (800157c <initialise_monitor_handles+0xb4>)
 800154a:	681b      	ldreq	r3, [r3, #0]
 800154c:	602b      	streq	r3, [r5, #0]
 800154e:	6833      	ldr	r3, [r6, #0]
 8001550:	6023      	str	r3, [r4, #0]
 8001552:	2600      	movs	r6, #0
 8001554:	6066      	str	r6, [r4, #4]
 8001556:	f7ff ffab 	bl	80014b0 <_has_ext_stdout_stderr>
 800155a:	b130      	cbz	r0, 800156a <initialise_monitor_handles+0xa2>
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <initialise_monitor_handles+0xb4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800156a:	b005      	add	sp, #20
 800156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001570:	200000ac 	.word	0x200000ac
 8001574:	200000b4 	.word	0x200000b4
 8001578:	200000a8 	.word	0x200000a8
 800157c:	200000b0 	.word	0x200000b0
 8001580:	080016d6 	.word	0x080016d6

08001584 <_isatty>:
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	f7ff fd73 	bl	8001070 <findslot>
 800158a:	2509      	movs	r5, #9
 800158c:	4604      	mov	r4, r0
 800158e:	b920      	cbnz	r0, 800159a <_isatty+0x16>
 8001590:	f7ff f808 	bl	80005a4 <__errno>
 8001594:	6005      	str	r5, [r0, #0]
 8001596:	4620      	mov	r0, r4
 8001598:	bd70      	pop	{r4, r5, r6, pc}
 800159a:	4628      	mov	r0, r5
 800159c:	4621      	mov	r1, r4
 800159e:	beab      	bkpt	0x00ab
 80015a0:	4604      	mov	r4, r0
 80015a2:	2c01      	cmp	r4, #1
 80015a4:	d0f7      	beq.n	8001596 <_isatty+0x12>
 80015a6:	f7fe fffd 	bl	80005a4 <__errno>
 80015aa:	2400      	movs	r4, #0
 80015ac:	4605      	mov	r5, r0
 80015ae:	2613      	movs	r6, #19
 80015b0:	4630      	mov	r0, r6
 80015b2:	4621      	mov	r1, r4
 80015b4:	beab      	bkpt	0x00ab
 80015b6:	4606      	mov	r6, r0
 80015b8:	602e      	str	r6, [r5, #0]
 80015ba:	e7ec      	b.n	8001596 <_isatty+0x12>

080015bc <_init>:
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	bf00      	nop
 80015c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c2:	bc08      	pop	{r3}
 80015c4:	469e      	mov	lr, r3
 80015c6:	4770      	bx	lr

080015c8 <_fini>:
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ca:	bf00      	nop
 80015cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ce:	bc08      	pop	{r3}
 80015d0:	469e      	mov	lr, r3
 80015d2:	4770      	bx	lr
